{"version":3,"sources":["redux/modules/user.js","redux/modules/image.js","redux/modules/post.js","redux/modules/comment.js","redux/modules/profile.js","redux/configureStore.js","elements/Button.js","elements/Grid.js","elements/Text.js","elements/Image.js","elements/Input.js","elements/Spinner.js","components/Header.js","shared/NotFound.js","components/Post.js","components/CommentWrite.js","shared/InfinityScroll.js","pages/PostList.js","shared/Upload.js","pages/PostWrite.js","pages/PostEdit.js","shared/common.js","pages/Signup.js","pages/Login.js","components/ProfileHeader.js","pages/Mypost.js","components/Comment.js","pages/CommentList.js","shared/App.js","reportWebVitals.js","index.js"],"names":["LOG_IN","LOGIN_CHECK","GET_USER","logIn","createAction","user","handleActions","session","state","action","produce","draft","is_login","payload","actionCreators","data","dispatch","getState","history","axios","method","url","headers","sessionStorage","getItem","email","nickname","password","passwordConfirm","then","res","push","window","alert","catch","error","replace","localStorage","setItem","JSON","stringify","accessToken","UPLOADING","SET_PREVIEW","setPreview","uploading","preview","SET_POST","ADD_POST","EDIT_POST","DELETE_POST","LOADING","LIKE_TOGGLE","setPost","post_list","paging","pageNum","addPost","post","editPost","post_id","content","deletePost","loading","is_loading","likeToggle","heartLike","moment","format","list","unshift","idx","findIndex","p","postId","splice","totalLike","prePost","_paging","response","next","length","err","contents","image","formData","FormData","append","new_post","writer","totalComment","checkMember","imageUrl","createdAt","imageActions","id","_post_idx","_edit","edit_post","_post","new_like","SET_COMMENT","ADD_COMMENT","DELETE_COMMENT","setComment","content_list","addComment","deleteComment","new_content_list","filter","v","commentId","console","log","new_content","options","PROFILE_LOADING","profile_loading","name","createBrowserHistory","rootReducer","combineReducers","User","Post","Image","comment","Comment","profile","Profile","router","connectRouter","middlewares","thunk","withExtraArgument","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","Button","props","text","_onClick","is_float","children","margin","width","padding","is_alert","_disabled","height","is_upload","styles","backgroundColor","bg","color","borderRadius","border","Fragment","FloatButton","onClick","NotiButton","style","UploadBT","ElButton","disabled","defaultProps","styled","button","Grid","is_flex","flex_row","flex_column","min_height","max_height","min_width","max_width","bg_color","center","flex_detail","GridBox","div","Text","bold","size","NotP","cursor","textAlign","T","P","shape","src","ImageCircle","AspectOutter","AspectInner","ImageSquare","ImageDefault","Input","label","placeholder","_onChange","type","multiLine","value","is_Submit","onSubmit","is_comment","radius","CommentInput","onChange","ElTextArea","rows","ElInput","onKeyPress","e","key","textarea","input","Spinner","is_dim","SpinnerWrap","SpinnerSvg","Header","Wrapper","HeaderContents","Logo","IconContainer","user_profile","NotFound","goBack","useDispatch","postActions","preventDefault","stopPropagation","image_url","fontWeight","CommentWrite","React","useState","setContent","Section","Outter","Form","InputComment","target","ButtonComment","commentActions","section","form","span","InfinityScroll","callNext","is_next","_handleScroll","_","throttle","innerHeight","document","body","scrollHeight","documentElement","scrollTop","handleScroll","useCallback","useEffect","addEventListener","removeEventListener","PostList","useSelector","map","FileInput","Upload","fileInput","useRef","files","current","reader","FileReader","file","changeImage","readAsDataURL","onloadend","result","ref","PostWrite","setContents","setImage","PostEdit","parseInt","match","params","find","emailCheck","test","InnerBox","BannerBox","Banner","LoginBox","TopText","SingUpBox","SingUpText","SignupInput","Signup","setEmail","setPwd","setConfirmedPwd","setName","userActions","Line","hr","InputBox","TextBox","SignUpBox","SignSpan","Login","setPassword","ProfileHeader","align-items","Container","UserName","Select","Option","box-sizing","flex","Ui","Li1","List","Li2","Li3","TextContainer","Status","select","option","ImageBox","Div","Mypost","_writer","_imageUrl","profileActions","is_writer","TextComment","CommentList","comment_list","slice","sort","a","b","timeA","timeB","App","exact","path","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.267ae38d.chunk.js","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\r\nimport {produce} from \"immer\";\r\nimport axios from 'axios';\r\n\r\n//actions\r\nconst LOG_IN = \"LOG_IN\"; //로그인\r\nconst LOG_OUT = \"LOG_OUT\"; //로그아웃\r\nconst LOGIN_CHECK = 'LOGIN_CHECK';\r\nconst GET_USER = \"GET_USER\"; //유저정보 가져오기\r\n\r\n//actionCreators\r\nconst logIn = createAction(LOG_IN, (user) => ({user}));\r\nconst logOut = createAction(LOG_OUT, (user) => ({user}));\r\n\r\nconst loginCheck = createAction(LOGIN_CHECK, (session) => ({session}));\r\nconst getUser = createAction(GET_USER, (user) => ({user}));\r\n\r\n//initialState\r\nconst initialState = {\r\n    is_login: false,\r\n};\r\n\r\n// const mockUserAPl = 'https://run.mocky.io/v3/ce3bcb61-6cb3-471d-bc40-e3243360b529'\r\n\r\n//로그인api\r\nconst loginAPI = (data) => {\r\n    return function (dispatch, getState, { history }) {\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://3.36.50.96/api/login\",\r\n            headers: {\r\n                \"Accept\": \"application/json\", //클라이언트가 서버한테 요청하는(원하는) 타입\r\n                \"Content-Type\":\"application/json;charset=UTF-8\", //현재 서버한테 보내는 데이터 타입\r\n                'Access-Control-Allow-Origin' : '*',\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n            data: {\r\n                \"email\": data.email,\r\n                \"password\": data.password,\r\n            }\r\n        }).then((res)=>{\r\n            // console.log(res);\r\n            localStorage.setItem(\"email\", JSON.stringify(`${data.email}`)); //localStorage의 텍스트형이므로 객체 json.stringfy로 변환\r\n            // res.data.accessToken를 해줘야 application value에 담김\r\n            sessionStorage.setItem(\"token\", res.data.accessToken);\r\n            // sessionStorage.setItem(\"token\", res.data.accessToken);\r\n            // sessionStorage.setItem(\"token\", res.data.Authorization);\r\n            // console.log(res.data)\r\n\r\n            dispatch(logIn({\r\n                email: data.email,\r\n                password: data.password,\r\n            }));\r\n            //token 확인\r\n            // console.log(res.data)\r\n            history.push(\"/\");\r\n        }).catch(error=>{\r\n            // console.log(error);\r\n            window.alert(\"가입정보를 다시 한번 확인해주세요.\");\r\n            }   \r\n        );\r\n\r\n    };\r\n};\r\n\r\n//로그아웃\r\nconst logOutApi = () =>{\r\n    return function (dispatch, getState, { history }){\r\n        localStorage.removeItem(\"email\");\r\n        sessionStorage.removeItem(\"token\");\r\n        dispatch(logOut());\r\n        history.replace(\"/login\");\r\n    }\r\n\r\n}\r\n\r\n//회원가입api\r\nconst SignUPApi = (data) => {\r\n    return function (dispatch, getState, { history }){\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://3.36.50.96/api/signup\",\r\n            headers: {\r\n                \"Accept\": \"application/json\", //클라이언트가 서버한테 요청하는(원하는) 타입\r\n                \"Content-Type\":\"application/json;charset=UTF-8\", //현재 서버한테 보내는 데이터 타입\r\n                'Access-Control-Allow-Origin' : '*',\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n            data: {\r\n                \"email\": data.email,\r\n                \"nickname\": data.nickname,\r\n                \"password\": data.password,\r\n                \"passwordConfirm\": data.passwordConfirm\r\n            },\r\n\r\n        }).then((res)=>{\r\n            // console.log(res);\r\n            history.push(\"/login\");\r\n            window.alert(\"축하합니다! 회원가입 되었습니다!\")\r\n        }).catch(error=>{\r\n            // console.log(error);\r\n            window.alert(\"회원가입 실패!\");\r\n            history.replace(\"/login\");\r\n        });\r\n    }\r\n};\r\n\r\n//Reducer\r\nexport default handleActions({\r\n    [LOGIN_CHECK]: (state,action) => produce(state,(draft) => {\r\n        draft.is_login = action.payload.session;\r\n    }),\r\n    [LOG_IN]: (state,action) => produce(state,(draft) => {\r\n        draft.user = action.payload.user;\r\n        draft.is_login = true;\r\n    }),\r\n    // [LOG_OUT]: (state,action) => produce(state,(draft) => {\r\n    //     draft.user = null;\r\n    //     draft.is_login = false;\r\n    // }),\r\n    [GET_USER]: (state, action) => produce(state, (draft) => {\r\n        \r\n    }),\r\n\r\n}, initialState);\r\n\r\n\r\n//action creator export\r\nconst actionCreators = {\r\n    loginCheck,\r\n    logIn,\r\n    logOut,\r\n    getUser,\r\n    SignUPApi,\r\n    loginAPI,\r\n    logOutApi,\r\n\r\n};\r\n\r\nexport {actionCreators};","// 미리보기 이미지 넣기 (post에 한 번에 해도 ok)\r\nimport { createAction, handleActions } from \"redux-actions\";\r\nimport produce from \"immer\";\r\nimport axios from \"axios\";\r\n\r\n// Actions\r\nconst UPLOADING = \"UPLOADING\";\r\n// const UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\r\nconst SET_PREVIEW = \"SET_PREVIEW\";\r\n\r\n// createAction(Action Creators 대신 편하고 쉽게 만들기)\r\nconst uploading = createAction(UPLOADING, (uploading) => ({ uploading }));\r\n// 이미지 업로드는 post모듈에서 addCardDB로 다른 데이터와 한꺼번에 보내므로 필요없음\r\n// const uploadImage = createAction(UPLOAD_IMAGE, (image_url) => ({ image_url }));\r\nconst setPreview = createAction(SET_PREVIEW, (preview) => ({ preview }));\r\n\r\n// 리듀서가 사용할 initialState\r\nconst initialState = {\r\n  // image_url: \"\",\r\n  uploading: false,\r\n  preview: null,\r\n};\r\n\r\n// 이미지 업로드는 post모듈에서 addCardDB로 다른 데이터와 한꺼번에 보내므로 필요없음\r\n// const uploadImageDB = (image) => {\r\n//   return function (dispatch, getState, {history}) {\r\n//     dispatch(uploading(true));\r\n//   };\r\n// }\r\n\r\n// handleActions(리듀서 대신 편하게 만들기)\r\nexport default handleActions({\r\n  [UPLOADING]: (state, action) => produce(state, (draft) => {\r\n    draft.uploading = action.payload.uploading;\r\n  }),\r\n\r\n  // [UPLOAD_IMAGE]: (state, action) => produce(state, (draft) => {\r\n  //   draft.image_url = action.payload.image_url;\r\n  //   draft.uploading = false;\r\n  // }),\r\n  \r\n  [SET_PREVIEW]: (state, action) => produce(state, (draft) => {\r\n    draft.preview = action.payload.preview;\r\n  }),\r\n  },initialState);\r\n\r\nconst actionCreators = {\r\n  // uploadImage,\r\n  // uploadImageDB,\r\n  setPreview,\r\n};\r\n\r\nexport { actionCreators };","import { createAction, handleActions } from \"redux-actions\";\r\nimport { produce } from \"immer\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n// 업로드 후 프리뷰 이미지 없애주기 위해\r\nimport { actionCreators as imageActions } from \"./image\";\r\n\r\n// actions\r\nconst SET_POST = \"SET_POST\";\r\nconst ADD_POST = \"ADD_POST\";\r\nconst EDIT_POST = \"EDIT_POST\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst LOADING = \"LOADING\";\r\nconst LIKE_TOGGLE = \"LIKE_TOGGLE\";\r\n\r\n\r\n//action creator\r\nconst setPost = createAction(SET_POST, (post_list, paging, pageNum) => ({post_list, paging, pageNum}));\r\nconst addPost = createAction(ADD_POST, (post) => ({post}));\r\nconst editPost = createAction(EDIT_POST, (post_id, content) => ({post_id, content}));\r\nconst deletePost = createAction(DELETE_POST, (post_id) => ({ post_id }));\r\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\r\nconst likeToggle = createAction(LIKE_TOGGLE, (post_id, heartLike) => ({post_id, heartLike}));\r\n\r\n\r\nconst initialState = {\r\n    list: [],\r\n    preview: null,\r\n    // 무한스크롤 위해\r\n    paging: { prePost: null, pageNum: false},\r\n    is_loading: false,\r\n    // 좋아요\r\n    heartLike: false,\r\n}\r\n\r\n// 게시글 하나의 정보(Post의 defaultProps)\r\nconst initialPost = {\r\n    writer: \"Robert Downey Jr.\",\r\n    user_profile: \"https://img.insight.co.kr/static/2018/06/08/700/oaytfz0m123a56r373eh.jpg\",\r\n    image_url: \"https://cdn.vox-cdn.com/thumbor/M2rjDALxvNDv3yqeYuIdL3spabo=/0x0:2000x1333/1200x675/filters:focal(840x507:1160x827)/cdn.vox-cdn.com/uploads/chorus_image/image/65939918/171109_08_11_37_5DS_0545__1_.0.jpg\",\r\n    content: \"NewYork NewYork\",\r\n    heartLike: false,\r\n    totalLike: 0,\r\n    totalComment: 0,\r\n    checkMember: false,\r\n    insert_dt: moment().format(\"YYYY년 MM월 DD일 hh:mm:ss\"),\r\n};\r\n\r\n// 다 가지고 올거니까 조건 걸게 없으니 일단 공란(심화3-3 12:~)\r\n// 데이터 형식 맞추기는 Object.keys()사용(심화3-3 15:~)\r\n// 왜? 키 값만 뽑아서 배열로 만들어 주려고. 왜 배열로? reduce(누산)쓰려고 \r\nconst getPostDB = (pageNum) => {\r\n    return function (dispatch, getState, {history}){\r\n\r\n        let _paging = getState().post.paging;\r\n        // start값은 있지만 next값이 없으면 다음목록 없으므로 아래 로직 실행할 필요 없음\r\n        if(_paging.prePost && !_paging.pageNum){\r\n            return;\r\n        }\r\n\r\n        dispatch(loading(true));\r\n\r\n       // 원본(새로고침해야 피드가 보임? 왜 또 잘 보임??? -> 토큰의 expire문제였음)\r\n        axios({\r\n            method: 'get',\r\n            url: 'http://3.36.50.96/api/post/',\r\n            // url: `http://3.36.50.96/api/post/page/${pageNum}`,\r\n            // data: {},\r\n            headers: { \r\n                \"Content-Type\": \"multipart/form-data\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n        }).then((response) => {\r\n            // console.log(response);\r\n            // console.log(response.data);\r\n\r\n            let paging = {\r\n                prePost: response.data.prePost,\r\n                next: response.data.length,\r\n                // next: response.data.length === size + 1 ? response.data[response.data.length - 1] : null,\r\n                // size: size,\r\n            }\r\n            // 서버가 is_next주면 필요없음\r\n            // response.data.pop();\r\n\r\n            dispatch(setPost(response.data, paging));\r\n\r\n        }).catch(err => {\r\n            // console.log(\"에러? 아니져~ 연봉 올라가는 소리~\");\r\n        })\r\n    };\r\n};\r\n\r\n\r\n// 서버에 새 포스트 저장하는 함수\r\n// 추가할 데이터 모양새를 먼저 파악. 모양새대로 추가 할것임\r\n// 유저정보는 이미 리덕스에 있음 \r\n// 카드를 하나 추가할 때, 들어가야할(필요한) 데이터를 파라미터로 넣어주기\r\n// 이 값들은 카드를 추가하는 곳인 PostWrite에도 동일하게 들어가야함\r\nconst addPostDB = (contents, image) => {\r\n    return function (dispatch, getState, {history}){\r\n\r\n        // VALIDATION \r\n        // 이미지 모듈에서 이미지 가져오기\r\n        const _image = getState().image.preview;\r\n        // 만약 이미지가 없으면 경고를 띄워주고 업로드 막기\r\n        if (!_image) {\r\n        window.alert(\"이미지가 필요해요!\");\r\n        return;\r\n        }\r\n\r\n        // const imageUploading = getState().image.uploading;\r\n\r\n        // FormData형식으로 데이터 넘겨주기\r\n        const formData = new FormData();\r\n        // formData.append(name, value);\r\n        // name은 value에 포함되는 데이터 필드 이름, value는 필드값\r\n        formData.append('content', contents);\r\n        formData.append('image', image);\r\n        // formadata 내용 확인(그냥 콘솔로그론 안보임)\r\n        // for (let key of formData.keys()) { console.log(key); }\r\n        // for (var value of formData.values()) { console.log(value); }\r\n\r\n        axios({\r\n            method: 'post',\r\n            url: 'http://3.36.50.96/api/post',  //??똑같음?? 메소드가 달라서!\r\n            // url: 'http://localhost:3001/posts',  //일단 로컬에서 제이슨서버 만들어서 돌려보기\r\n            data: formData,\r\n            headers: { \r\n                \"Content-Type\": \"multipart/form-data\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n        }).then((response) => {\r\n            // console.log(response);\r\n            // console.log(response.data);\r\n            // 서버에서 데이터 전체 내려주면 res.data.~하면 되지만\r\n            // 전체 데이터를 내려주지 않으면 파라미터값을 그대로 가져온다.\r\n            // 이미지를 http://도메인주소+res.data.~로 넣어줘야 한다.\r\n            // console.log(response.data.imageUrl);\r\n\r\n            const new_post = {\r\n                // 키값은 logger에서 next state에서 post의 list의 키값(필드값?)으로 맞춰 줘야함\r\n                // 안그러면 defaultProps값 들어가고 새로고침 해야만 제값 들어감\r\n                postId: response.data.postId,\r\n                writer: response.data.writer,\r\n                content: response.data.content,\r\n                totalComment: 0,\r\n                heartLike: false,\r\n                totalLike: 0,\r\n                checkMember: true,\r\n                imageUrl: response.data.imageUrl,\r\n                createdAt: moment().format(\"YYYY년 MM월 DD일 hh:mm\"),\r\n            }\r\n            // console.log(new_post);            \r\n\r\n            // 서버에 데이터 잘 들어갔는지 확인 후 리덕스에 추가\r\n            dispatch(addPost(new_post));\r\n            // 다음에 글 작성할 떄 이전 이미지 안보이게 하려고 근데 왜 보이지????? 다시 안보임??? ???\r\n            dispatch(imageActions.setPreview(null));\r\n            history.replace('/');\r\n            // history.replace('/')와 window.location.replace('/')의 차이?\r\n            // history는 주소가 바뀐것처럼 보여주는 렌더링, window는 사이트 자체가 재렌더링\r\n\r\n            \r\n        }).catch((err) => {\r\n            window.alert(\"포스트 작성에 문제가 있어요!\", err);\r\n            // console.log(\"에러? 아니져~ 연봉 올라가는 소리~\", err);\r\n        }).catch((err) => {\r\n            window.alert(\"이미지 업로드에 문제가 있어요!\", err);\r\n            // console.log(\"에러? 아니져~ 연봉 올라가는 소리~\", err);\r\n        })\r\n    }\r\n} \r\n\r\nconst editPostDB = (id, content) => {\r\n    return function (dispatch, getState, {history}){\r\n\r\n        // 프리뷰 이미지 가져오기\r\n        const _image = getState().image.preview;\r\n        // 게시글 하나의 정보 찾기(수정하려는 게시글이 게시글 목록에서 몇 번째에 있나 확인)\r\n        const _post_idx = getState().post.list.findIndex((p) => p.postId === id);\r\n        // 위의 인덱스로 수정하려는 게시글의 수정 전 정보를 가져오기\r\n        const _post = getState().post.list[_post_idx];\r\n        // console.log(_post)\r\n\r\n        let _edit = JSON.stringify(content);\r\n          \r\n        // console.log(_edit);\r\n        // // object\r\n        // console.log(typeof _edit)\r\n\r\n        axios({\r\n            method: 'put',\r\n            url: `http://3.36.50.96/api/post/${id}`,\r\n            data: { content: _edit },\r\n            // data: { ..._edit },\r\n            headers: { \r\n                // \"Content-Type\": \"multipart/form-data\",\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n        }).then((response) => {\r\n            // console.log(response);\r\n            // console.log(response.data);\r\n            const edit_post = {\r\n                content: content,\r\n            };\r\n            // console.log(edit_post);            \r\n\r\n            window.alert(\"게시물을 수정 하시겠습니까?\");\r\n            dispatch(editPost(id, edit_post));\r\n            history.replace('/');\r\n        }).catch((err) => {\r\n            window.alert(\"내 게시글만 수정할 수 있어요!\", err);\r\n            // console.log(\"에러? 아니져~ 연봉 올라가는 소리~\", err);\r\n        })\r\n    }\r\n}\r\n\r\nconst deletePostDB = (id) => {\r\n    return function (dispatch, getState, {history}){\r\n\r\n        axios({\r\n            method: 'delete',\r\n            url: `http://3.36.50.96/api/post/${id}`,\r\n            // data: { postId: id },\r\n            headers: { \r\n                \"Content-Type\": \"multipart/form-data\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n        }).then((response) => {\r\n            // console.log(response);\r\n            // console.log(response.data);\r\n            window.alert(\"게시물을 삭제 하시겠습니까?\");\r\n            dispatch(deletePost(response.data.postId));\r\n\r\n        }).catch((err) => {\r\n            window.alert(\"내 게시글만 지울 수 있어요!\", err);\r\n            // console.log(\"에러? 아니져~ 연봉 올라가는 소리~\", err);\r\n        })\r\n    }\r\n}      \r\n\r\nconst likeToggleDB = (id, heartLike = false, totalLike) => {\r\n    return function (dispatch, getState, { history }) {\r\n\r\n        // post를 찾기 위해, 배열의 몇 번째에 있나 확인\r\n        const _post_idx = getState().post.list.findIndex((p) => p.postId === id);    \r\n        // 확인한 인덱스로 수정하려는 게시글의 수정 전 정보를 가져오기\r\n        const _post = getState().post.list[_post_idx];\r\n        // console.log(_post)\r\n        // user 정보 가져오기(nickname없어서 이메일로 확인)\r\n        // const user_id = getState().user.user.email;           \r\n        \r\n        axios({\r\n            method: 'post',\r\n            url: `http://3.36.50.96/api/like/${id}`,\r\n            // data: { postId: id },\r\n            headers: { \r\n            \"Content-Type\": \"multipart/form-data\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n        }).then((response) => {\r\n            // console.log(response);\r\n            // console.log(response.data);\r\n\r\n            // 좋아요한 상태라면 해제\r\n            if (_post.heartLike){\r\n                const new_like = {\r\n                heartLike: false,\r\n                totalLike: _post.totalLike - 1,\r\n                }\r\n                dispatch(likeToggle(id, new_like));\r\n            }else{\r\n            // 좋아요 해제 상태라면 좋아요 하기\r\n                const new_like = {\r\n                heartLike: true,\r\n                totalLike: _post.totalLike + 1,\r\n                }\r\n                dispatch(likeToggle(id, new_like));\r\n            }\r\n        })\r\n    };\r\n};\r\n\r\n\r\n// reducer\r\nexport default handleActions({\r\n    [SET_POST]: (state, action) => produce(state, (draft) => {\r\n        draft.list.push(...action.payload.post_list);\r\n        draft.paging = action.payload.paging;\r\n        draft.is_loading = false;\r\n    }),\r\n\r\n    [ADD_POST]: (state, action) => produce(state, (draft) => {\r\n        // 배열 제일 앞으로 붙이기\r\n        draft.list.unshift(action.payload.post);\r\n        draft.preview = null;\r\n    }),\r\n\r\n    [EDIT_POST]: (state, action) => produce(state, (draft) => {\r\n        // findIndex는 배열을 뒤져서 조건을 주면, 그에 맞는 애의 인덱스 번호를 준다.\r\n        let idx = draft.list.findIndex((p) => p.postId === action.payload.post_id);\r\n        // console.log(idx);\r\n        draft.list[idx].content = action.payload.content.content;\r\n    }),\r\n\r\n    [DELETE_POST]: (state, action) => produce(state, (draft) => {\r\n        let idx = draft.list.findIndex((p) => p.postId === action.payload.post_id);\r\n        // console.log(idx);\r\n\r\n        if (idx !== action.payload.post_id){\r\n            draft.list.splice(idx, 1);\r\n        }\r\n    }),\r\n\r\n    [LOADING]: (state, action) => produce(state, (draft) => {\r\n        draft.is_loading = action.payload.is_loading;\r\n        // export해 줄 필요 없음. 게시글 가져오기 시작할떄 true, false\r\n    }),\r\n\r\n    [LIKE_TOGGLE]: (state, action) => produce(state, (draft) => { \r\n        // 배열에서 몇 번째에 있는 지 찾은 다음, heartLike action에서 가져온 값으로 바꾸기\r\n        let idx = draft.list.findIndex((p) => p.postId === action.payload.post_id);\r\n        draft.list[idx].heartLike = action.payload.heartLike.heartLike;\r\n        draft.list[idx].totalLike = action.payload.heartLike.totalLike;\r\n     }) \r\n}, initialState\r\n);\r\n\r\n\r\n\r\n// action creator export 묶어서 내보내자\r\nconst actionCreators = {\r\n    setPost,\r\n    addPost,\r\n    editPost,\r\n    getPostDB,\r\n    addPostDB,\r\n    editPostDB,\r\n    deletePostDB,\r\n    likeToggleDB,\r\n};\r\n  \r\nexport { actionCreators };","import { createAction, handleActions } from \"redux-actions\";\r\nimport { produce } from \"immer\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\n\r\nconst SET_COMMENT = \"SET_COMMENT\";\r\nconst ADD_COMMENT = \"ADD_COMMENT\";\r\nconst DELETE_COMMENT = \"DELETE_COMMENT\";\r\n\r\nconst setComment = createAction(SET_COMMENT, (content_list) => ({content_list}));\r\nconst addComment = createAction(ADD_COMMENT, (content) => ({content}));\r\nconst deleteComment = createAction(DELETE_COMMENT, (content) => ({content}));\r\n\r\nconst initialState = {\r\n    list: [],\r\n}\r\n\r\n// 게시글 하나에는 어떤 정보가 있어야 하는 지 하나 만들어둡시다! :)\r\nconst initialComment = {\r\n  content : \"content 입니다\",\r\n  insert_dt: moment().format(\"YYYY년 MM월 DD일 hh:mm:ss\"),\r\n};\r\n\r\nconst addCommentAPI = (content, postId) => {\r\n    return function (dispatch, getState, {history}) {\r\n      // formdata에 파일과 게시글 내용을 담아 서버로 전송\r\n    //   const formData = new FormData();\r\n    //   formData.append(\"content\", content);\r\n\r\n    // for (let key of formData.keys()) { console.log(key); }\r\n    // for (var value of formData.values()) { console.log(value); }\r\n        \r\n        axios({\r\n        method: \"POST\",\r\n        url:  `http://3.36.50.96/api/comment/${postId}`,\r\n        data: {content: content},\r\n        headers: {\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n        },\r\n      }).then((response) => {\r\n          console.log(response.data);\r\n          \r\n        //   console.log(response.data);\r\n         \r\n           // 방금 업데이트 된 포스트 정보를 받아 정리한다.\r\n          const new_content = {\r\n            content: response.data.content,\r\n            // createdAt: moment().format(\"YYYY년 MM월 DD일 hh:mm\"),\r\n          };\r\n          console.log(new_content)\r\n          // 리덕스 상태 업데이트\r\n          dispatch(addComment(new_content));\r\n          history.push(`/comment/${postId}`);\r\n\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  };\r\n\r\n  const setCommentAPI = (postId) => {\r\n    return function (dispatch, getState, {history}) {\r\n        axios({\r\n            method: 'get',\r\n            url: `http://3.36.50.96/api/comment/${postId}`,\r\n            // data: {},\r\n            headers: { \r\n                \"Content-Type\": \"application/json;charset=UTF-8\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n        }).then((response) => {\r\n          console.log(response.data);\r\n          dispatch(setComment(response.data));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  };\r\n\r\n  const deleteCommentAPI = (commentId) => {\r\n    return function(dispatch) {\r\n      const options = {\r\n        url: `http://3.36.50.96/api/comment/${commentId}`,\r\n        method: 'DELETE',\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=UTF-8\",\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n        },\r\n        data: {\r\n            commentId : commentId\r\n        }\r\n      };\r\n      axios(options).then((response) => {\r\n        // console.log(response)\r\n        // 방금 삭제한 게시물의 writer를 이용하여 리덕스 상태 업데이트\r\n        dispatch(deleteComment(commentId))\r\n      }).catch((error) => {\r\n      })\r\n    }\r\n  }\r\n\r\n// reducer\r\nexport default handleActions(\r\n    {\r\n        [SET_COMMENT]: (state, action) => produce(state, (draft) => {\r\n            draft.list = action.payload.content_list;\r\n        }),\r\n  \r\n        [ADD_COMMENT]: (state, action) => produce(state, (draft) => {\r\n            draft.list.unshift(action.payload.content);\r\n        }),\r\n\r\n        [DELETE_COMMENT] : (state, action) => produce(state,(draft) => {\r\n            let new_content_list = draft.list.filter((v) => {\r\n              if(v.commentId !== action.payload.content){\r\n                return v\r\n              }\r\n            })\r\n      \r\n            draft.list = new_content_list;\r\n          }),\r\n    },\r\n    initialState\r\n  );\r\n\r\n  // action creator export\r\nconst actionCreators = {\r\n    setComment,\r\n    addComment,\r\n    addCommentAPI,\r\n    setCommentAPI,\r\n    deleteCommentAPI,\r\n\r\n  };\r\n  \r\n  export { actionCreators };","import { createAction, handleActions } from \"redux-actions\";\r\nimport { produce } from \"immer\";\r\nimport axios from \"axios\";\r\n\r\n// Actions\r\nconst PROFILE_LOADING = \"PROFILE_LOADING\";\r\n\r\n// createAction\r\nconst profile_loading = createAction(PROFILE_LOADING, (url, name) => ({ url, name }));\r\n\r\n\r\n// initialState\r\nconst initialState = {\r\n    imageUrl: null,\r\n    writer: null,\r\n};\r\n\r\n\r\n// axios\r\nconst profile_loadingAPI = (writer, imageUrl) => {\r\n    return function (dispatch, getState, {history}) {\r\n        axios({\r\n            method: 'GET',\r\n            url: `http://3.36.50.96/api/memberpage/${writer}`,\r\n            // data: {},\r\n            headers: { \r\n                \"Content-Type\": \"application/json;charset=UTF-8\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")};`,\r\n            },\r\n        }).then((response) => {\r\n          console.log(response)\r\n          const imageUrl = response.data.imageUrl;\r\n          const writer = response.data.writer;\r\n          dispatch(profile_loading(imageUrl, writer));\r\n\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  };\r\n\r\n\r\n// handleActions\r\nexport default handleActions({\r\n    [PROFILE_LOADING]: (state, action) => produce(state, (draft) => {\r\n      draft.imageUrl = action.payload.url;\r\n      draft.writer = action.payload.name;\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\n\r\n// action creator export\r\nconst actionCreators = {\r\n    profile_loading,\r\n    profile_loadingAPI,\r\n};\r\n  \r\nexport { actionCreators };\r\n\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { connectRouter } from \"connected-react-router\";\r\n\r\n// 리듀서를 가져올거예요.\r\nimport User from \"./modules/user\";\r\nimport Post from \"./modules/post\";\r\nimport Image from \"./modules/image\";\r\nimport Comment from \"./modules/comment\";\r\nimport like from \"./modules/like\";\r\nimport Profile from \"./modules/profile\";\r\n\r\n// history객체 만들기 \r\nexport const history = createBrowserHistory();\r\n\r\n// 가져온 리듀서를 루트 리듀서로 묶어줍니다.\r\nconst rootReducer = combineReducers({\r\n  user: User,\r\n  post: Post,\r\n  image: Image,\r\n  comment: Comment,\r\n  profile: Profile,\r\n  // 내가 만든 history랑 라우터 연결\r\n  router: connectRouter(history),\r\n});\r\n\r\n// 사용할 미들웨어 넣기\r\n// thunk에는 history를 넣기 (중간 다리 역할을 하는 미들웨어에서도 페이지 이동을 할 수 있게 하려고!)\r\nconst middlewares = [thunk.withExtraArgument({ history: history })];\r\n\r\n// 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\r\nconst env = process.env.NODE_ENV;\r\n\r\n// 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\r\nif (env === \"development\") {\r\n  const { logger } = require(\"redux-logger\");\r\n  middlewares.push(logger);\r\n}\r\n\r\n// redux devtools 익스텐션 사용 설정\r\nconst composeEnhancers =\r\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n      })\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\n// 스토어 만들기\r\nlet store = (initialStore) => createStore(rootReducer, enhancer);\r\n\r\nexport default store();","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = (props) => {\r\n  const { \r\n    text,\r\n     _onClick, \r\n     is_float, \r\n     children,\r\n     margin, \r\n     width, \r\n     padding, \r\n     is_alert, \r\n     _disabled,\r\n     height,\r\n     is_upload,\r\n     bg,\r\n     color,\r\n     borderRadius,\r\n     border,\r\n    } = props;\r\n  \r\n  const styles = {\r\n    margin: margin,\r\n    width: width,\r\n    height: height,\r\n    padding: padding,\r\n    backgroundColor: bg,\r\n    color: color,\r\n    borderRadius: borderRadius,\r\n    border: border,\r\n  }\r\n  if (is_float) {\r\n    return (\r\n      <React.Fragment>\r\n        <FloatButton onClick={_onClick}>{text? text : children}</FloatButton>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else if (is_alert){\r\n    return (\r\n      <React.Fragment>\r\n        <NotiButton style={styles}onClick={_onClick}>{text? text : children}</NotiButton>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  else if (is_upload){\r\n    return (\r\n      <React.Fragment>\r\n        <UploadBT style={styles}onClick={_onClick}>{text? text : children}</UploadBT>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ElButton style={styles} disabled={_disabled} onClick={_onClick}>{text? text : children}</ElButton>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nButton.defaultProps = {\r\n  text: false,\r\n  children: null,\r\n  _onClick: () => {},\r\n  is_float: false,\r\n  is_alert: false,\r\n  margin: false,\r\n  width: '100%',\r\n  padding: '12px 0px',\r\n  _disabled:false,\r\n  height: '100%',\r\n  is_upload: false,\r\n  backgroundColor: false,\r\n  color: false,\r\n  borderRadius: false,\r\n  border: false,\r\n};\r\n\r\nconst ElButton = styled.button`\r\n  width: ${(props) => props.width};\r\n  color: white;\r\n  background-color: ${(props) => props.bg};\r\n  font-weight: 800;\r\n  padding: ${(props) => props.padding};\r\n  box-sizing: border-box;\r\n  cursor:pointer;\r\n  ${(props) => (props.border? `border: ${props.border};` : ``)};\r\n  ${(props) => (props.margin? `margin: ${props.margin};` : ``)};\r\n  ${(props) => (props.borderRadius? `border-radius: ${props.borderRadius};` : ``)};\r\n`;\r\n//작성페이지 업로드 버튼 추가\r\nconst UploadBT = styled.button`\r\n  width: ${(props) => props.width};\r\n  color: #212121;\r\n  background-color: #ffffff;\r\n  font-weight: 800;\r\n  padding: ${(props) => props.padding};\r\n  border-radius: 5px;\r\n  box-sizing: border-box;\r\n  border: 1px solid #ffffff;\r\n  cursor:pointer;\r\n  ${(props) => (props.margin? `margin: ${props.margin};` : ``)};\r\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n`;\r\n\r\nconst NotiButton = styled.button`\r\n  width: ${(props) => props.width};\r\n  height: ${(props) => props.height};\r\n  color: #212121;\r\n  background-color: lavender;\r\n  padding: ${(props) => props.padding};\r\n  border-radius: 50%;\r\n  box-sizing: border-box;\r\n  border: none;\r\n  ${(props) => (props.margin? `margin: ${props.margin};` : ``)};\r\n`;\r\n\r\nconst FloatButton = styled.button`\r\n  /* display:flex;\r\n  justify-content:center;\r\n  align-items:center; */\r\n  text-align: center;\r\n  vertical-align: center;\r\n  width: 50px;\r\n  height: 50px;\r\n  border:none;\r\n  border-radius: 25px;\r\n  background-color: lavender;\r\n  color: #212121;\r\n  padding: 0px;\r\n  box-sizing: border-border-box;\r\n  font-size: 36px;\r\n  font-weight: 800;\r\n  position: fixed;\r\n  bottom: 50px;\r\n  right: 20px;\r\n  @media(min-width:1200px) {\r\n    right:200px;\r\n  }\r\n  @media(min-width:1400px) {\r\n    right:400px;\r\n  }\r\n`;\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Grid = (props) => {\r\n\r\n    const {\r\n        is_flex,\r\n        flex_row, \r\n        flex_column, \r\n        width, \r\n        height,\r\n        min_height,\r\n        max_height,\r\n        min_width,\r\n        max_width, \r\n        margin, \r\n        padding, \r\n        bg_color, \r\n        children, \r\n        center, \r\n        flex_detail, \r\n        border, \r\n        _onClick\r\n    } = props;\r\n    \r\n    const styles = {\r\n        is_flex,\r\n        flex_row,\r\n        flex_column,\r\n        width,\r\n        height,\r\n        min_height,\r\n        max_height,\r\n        min_width,\r\n        max_width,\r\n        margin,\r\n        padding,\r\n        bg_color,\r\n        center,\r\n        flex_detail,\r\n        border,\r\n        is_flex,\r\n    }\r\n\r\n    return(\r\n    <React.Fragment>\r\n        <GridBox {...styles} onClick={_onClick}>{children}</GridBox>\r\n    </React.Fragment>\r\n    )\r\n}\r\n\r\nGrid.defaultProps = {\r\n    is_flex: false,\r\n    width:'100%',\r\n    height:'100%',\r\n    max_width:false,\r\n    min_width:false,\r\n    max_height:false,\r\n    min_height:false,\r\n    padding: false,\r\n    margin: false,\r\n    bg_color: false,\r\n    flex_row: false,\r\n    flex_column: false,\r\n    center: false,\r\n    flex_detail: false,\r\n    border: false,\r\n    _onClick:()=>{},\r\n    \r\n}\r\n\r\nconst GridBox = styled.div`\r\n    width:${(props) => props.width};\r\n    max-width:${(props) => props.max_width};\r\n    min-width:${(props) => props.min_width};\r\n    height: ${(props) => props.height};\r\n    max-height: ${(props) => props.max_height};\r\n    min-height: ${(props) => props.min_height};\r\n    box-sizing:border-box;\r\n    ${(props) => props.border? `border: 1px solid #dbdbdb`: ''};\r\n    ${(props) => props.padding? `padding:${props.padding}` : ''};\r\n    ${(props) => props.margin? `margin:${props.margin}` : ''};\r\n    ${(props) => props.bg_color? `background-color:${props.bg_color}` : ''};\r\n    ${(props) => props.flex_row? `display:flex; flex-direction:row; ${props.flex_detail}`: ''};\r\n    ${(props) => props.flex_column? `display:flex; flex-direction:column; ${props.flex_detail}`: ''};\r\n    ${(props) => props.center? `text-align: center;`: ''};\r\n    ${(props) =>\r\n    props.is_flex\r\n      ? `display: flex; align-items: center; justify-content: space-between; `\r\n      : \"\"}\r\n`;\r\n\r\nexport default Grid;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Text = (props) => {\r\n  const { \r\n    bold, \r\n    color, \r\n    size, \r\n    children, \r\n    margin, \r\n    _onClick,\r\n    NotP, \r\n    cursor, \r\n    padding,\r\n    textAlign  \r\n  } = props;\r\n\r\n  const styles = { \r\n    bold: bold, \r\n    color: color, \r\n    size: size, \r\n    margin: margin, \r\n    cursor:cursor, \r\n    NotP:NotP, \r\n    padding:padding, \r\n    textAlign:textAlign,\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.NotP ? (\r\n        <T {...styles} onClick={_onClick}>\r\n          {children}\r\n        </T>\r\n      ) : (\r\n        <P {...styles} onClick={_onClick}>\r\n          {children}\r\n        </P>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nText.defaultProps = {\r\n  NotP: false,\r\n  children: null,\r\n  bold: false,\r\n  color: \"#222831\",\r\n  size: \"14px\",\r\n  margin: false,\r\n  _onClick: () => {},\r\n  cursor:'',\r\n  padding: false,\r\n  textAlign: false,\r\n};\r\n\r\nconst P = styled.p`\r\n  color: ${(props) => props.color};\r\n  vertical-align: center;\r\n  font-size: ${(props) => props.size};\r\n  font-weight: ${(props) => (props.bold ? \"600\" : \"400\")};\r\n  ${(props) => (props.margin ? `margin: ${props.margin}` : \"\")};\r\n  ${(props) => (props.padding ? `padding: ${props.padding}` : \"\")};\r\n  cursor: ${(props) => props.cursor};\r\n  text-align: ${(props) => props.textAlign};\r\n`;\r\n\r\nconst T = styled.div`\r\n  color: ${(props) => props.color};\r\n  vertical-align: center;\r\n  font-size: ${(props) => props.size};\r\n  font-weight: ${(props) => (props.bold ? \"600\" : \"400\")};\r\n  ${(props) => (props.margin ? `margin: ${props.margin}` : \"\")};\r\n  cursor: ${(props) => props.cursor};\r\n`;\r\n\r\nexport default Text;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Image = (props) => {\r\n\r\n  const { shape, src, size, _onClick, cursor, margin, padding } = props;\r\n\r\n\r\n  const styles = {\r\n    src: src,\r\n    size: size,\r\n    cursor: cursor,\r\n    margin: margin,\r\n    padding: padding,\r\n\r\n  };\r\n\r\n  if (shape === \"circle\") {\r\n    return <ImageCircle {...styles} onClick={_onClick}></ImageCircle>;\r\n  }\r\n\r\n  if (shape === \"rectangle\") {\r\n    return (\r\n      <AspectOutter>\r\n        <AspectInner {...styles}></AspectInner>\r\n      </AspectOutter>\r\n    );\r\n  }\r\n\r\n  if (shape === \"square\") {\r\n    return <ImageSquare {...styles}></ImageSquare>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ImageDefault {...styles}></ImageDefault>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nImage.defaultProps = {\r\n  shape: \"circle\",\r\n  src:\r\n    \"https://images.pexels.com/photos/376723/pexels-photo-376723.jpeg?cs=srgb&dl=pexels-daniel-pixelflow-376723.jpg&fm=jpg\",\r\n  size: 36,\r\n  _onClick: () => {},\r\n  cursor: \"\",\r\n  margin: false,\r\n  padding: false,\r\n\r\n};\r\n\r\nconst ImageDefault = styled.div`\r\n  --size: ${(props) => props.size}px;\r\n  width: var(--size);\r\n  height: var(--size);\r\n  cursor: ${(props) => props.cursor};\r\n  background-image: url(\"${(props) => props.src}\");\r\n  background-size: cover;\r\n`;\r\n\r\nconst ImageCircle = styled.div`\r\n  --size: ${(props) => props.size}px;\r\n  width: var(--size);\r\n  height: var(--size);\r\n  border-radius: var(--size);\r\n  cursor: ${(props) => props.cursor};\r\n  background-image: url(\"${(props) => props.src}\");\r\n  background-size: cover;\r\n  ${(props) => (props.margin ? `margin: ${props.margin}` : \"\")};\r\n  /* 헤더이미지 위해 주석처리 */\r\n  /* flex: 1;\r\n  border: 1px solid blue;\r\n  box-sizing:border-box; */\r\n`;\r\n\r\nconst ImageSquare = styled.div`\r\n  --size: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n  height: var(--size);\r\n  cursor: ${(props) => props.cursor};\r\n  background-image: url(\"${(props) => props.src}\");\r\n  background-size: cover;\r\n  margin: 4px;\r\n`;\r\n\r\n//포스트 이미지\r\nconst AspectOutter = styled.div`\r\n  width: auto;\r\n  min-width: 250px;\r\n`;\r\n\r\nconst AspectInner = styled.div`\r\n  position: relative;\r\n  padding-top: 75%;\r\n  overflow: hidden;\r\n  background-image: url(\"${(props) => props.src}\");\r\n  background-size: cover;\r\n  ${(props) => (props.margin ? `margin: ${props.margin}` : \"\")};\r\n  ${(props) => (props.padding ? `padding: ${props.padding}` : \"\")};\r\n\r\n`;\r\n\r\nexport default Image;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Text, Grid } from \"./index\";\r\n\r\nimport { history } from \"../redux/configureStore\";\r\n\r\n\r\nconst Input = (props) => {\r\n\r\n  const { \r\n    label, \r\n    placeholder, \r\n    _onChange, \r\n    type, \r\n    multiLine, \r\n    value, \r\n    is_Submit, \r\n    onSubmit , \r\n    margin, \r\n    is_comment,\r\n    border,\r\n    color,\r\n    radius,\r\n    height,\r\n    bg,\r\n\r\n  } = props;\r\n\r\n  if (is_comment) {\r\n    return (\r\n        <CommentInput \r\n        backgroundColor={bg}\r\n        borderRadius={radius}\r\n        margin={margin} \r\n        type={type} \r\n        placeholder={placeholder} \r\n        onChange={_onChange} \r\n        value={value}/>\r\n    );\r\n  };\r\n\r\n  if (multiLine) {\r\n    return (\r\n      <Grid>\r\n        <Text margin=\"0px\">{label ? label : \"\"}</Text>\r\n        <ElTextArea\r\n          rows={10}\r\n          value={value}\r\n          placeholder={placeholder}\r\n          onChange={_onChange}\r\n        ></ElTextArea>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid>\r\n        <Text margin=\"0px\">{label ? label : \"\"}</Text>\r\n        {/* 다른 인풋에 value값이 없기때문에 코멘트 작성 인풋에 isSubmit을 줘서 코멘트 작성 인풋만 value라는 props를 넣어주기 위함 */}\r\n        {is_Submit ? (\r\n          <ElInput\r\n            height={height}\r\n            color={color}\r\n            margin={margin}\r\n            value={value}\r\n            type={type}\r\n            placeholder={placeholder}\r\n            onChange={_onChange}\r\n            border={border}\r\n            borderRadius={radius}\r\n            onKeyPress={(e) => {\r\n              if(e.key === 'Enter'){\r\n                onSubmit(e);\r\n              }\r\n            }}\r\n          />\r\n        ) : (\r\n          <ElInput margin={margin} type={type} placeholder={placeholder} onChange={_onChange} />\r\n        )}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nInput.defaultProps = {\r\n  multiLine: false,\r\n  label: false,\r\n  placeholder: \"텍스트를 입력해주세요.\",\r\n  is_Submit: false,\r\n  _onChange: () => {},\r\n  type: \"text\",\r\n  value: \"\",\r\n  onSubmit: () => {},\r\n  margin:false,\r\n  is_comment: false,\r\n  width: false,\r\n  border: false,\r\n  color: false,\r\n  borderRadius: false,\r\n  height: false,\r\n  bg: false,\r\n};\r\n\r\n//작성페이지 멀티라인 수정\r\nconst ElTextArea = styled.textarea`\r\n  border: none;\r\n  width: 100%;\r\n  padding: 12px 4px;\r\n  box-sizing: border-box;\r\n  resize: none;\r\n`;\r\n\r\nconst ElInput = styled.input`\r\n${(props) => props.margin? `margin:${props.margin}` : ''};\r\n  width: 100%\r\n  ${(props) => props.border? `border:${props.border}` : ''};\r\n  padding: 12px 4px;\r\n  box-sizing: border-box;\r\n  ${(props) => props.height? `height:${props.height}` : ''};\r\n`;\r\n\r\nconst CommentInput = styled.input`\r\n${(props) => props.margin? `margin:${props.margin}` : ''};\r\n  border-style:none;\r\n${(props) => props.width? `width:${props.width}` : ''};\r\n${(props) => props.borderRadius? `border-radius:${props.borderRadius}` : ''};\r\n  padding: 12px 4px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport default Input;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Spinner = (props) => {\r\n  const { type, size, is_dim } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SpinnerWrap type={type} is_dim={is_dim}>\r\n        <SpinnerSvg size={size} />\r\n      </SpinnerWrap>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  type: \"inline\", // inline, page\r\n  is_dim: false,\r\n  size: 60,\r\n};\r\n\r\nconst SpinnerWrap = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 20px 0;\r\n  ${(props) =>\r\n    props.type === \"page\"\r\n      ? `position: fixed;\r\n        height: 95vh;\r\n        top: 0;\r\n        left: 0;\r\n        padding: 0;\r\n        zIndex: 9999;`\r\n      : ``}\r\n  ${(props) =>\r\n    props.is_dim\r\n      ? `\r\n     background: rgba(0,0,0,0.4); \r\n     height: 100vh;\r\n  `\r\n      : ``}\r\n`;\r\n\r\nconst SpinnerSvg = styled.div`\r\n  --size: ${(props) => props.size}px;\r\n  width: var(--size);\r\n  height: var(--size);\r\n  background-image: url(\\\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='margin: auto; background: none; display: block; shape-rendering: auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cg transform='rotate(0 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.9166666666666666s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(30 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.8333333333333334s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(60 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.75s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(90 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.6666666666666666s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(120 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.5833333333333334s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(150 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.5s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(180 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.4166666666666667s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(210 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.3333333333333333s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(240 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.25s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(270 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.16666666666666666s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(300 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='-0.08333333333333333s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3Cg transform='rotate(330 50 50)'%3E%3Crect x='47' y='24' rx='3' ry='3.36' width='6' height='12' fill='%23222222'%3E%3Canimate attributeName='opacity' values='1;0' keyTimes='0;1' dur='1s' begin='0s' repeatCount='indefinite'%3E%3C/animate%3E%3C/rect%3E%3C/g%3E%3C/svg%3E\\\");\r\n  background-size: var(--size);\r\n`;\r\n\r\nexport default Spinner;","//프랙연습 끝이 아닌가?\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Grid, Text, Image, Button } from \"../elements/index\";\r\n\r\nimport { history } from \"../redux/configureStore\";\r\nimport { actionCreators as userActions } from \"../redux/modules/user\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { TiPlus } from \"react-icons/ti\";\r\n\r\n\r\nconst Header = (props) => {\r\n    // const dispatch = useDispatch()\r\n    // const user = useSelector(state=> state.user)\r\n    // let profile;\r\n    // let user_name\r\n    // if(user.user){\r\n    //     profile = user.user.profile_img\r\n    //     user_name = user.user.name\r\n    // }\r\n    // const token = sessionStorage.getItem('token')\r\n\r\n    // const logOut = () => {\r\n    //   if(window.confirm('로그아웃 하시겠어요?')){\r\n    //     dispatch(userActions.logOutSV(history))\r\n    //   } else{\r\n    //     return\r\n    //   }\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Wrapper>\r\n                <HeaderContents>\r\n                  <Logo onClick={()=>{history.push('/')}}></Logo>\r\n                  <IconContainer>\r\n                      <TiPlus \r\n                      size=\"30px\"\r\n                      cursor='pointer' \r\n                      onClick={()=>{history.push('/write')}} />\r\n\r\n                      <Image \r\n                      size=\"30\"\r\n                      shape=\"circle\" \r\n                      margin=\"0px\"\r\n                      src={props.user_profile}\r\n                      _onClick={()=>{history.push(`/memberpage/${props.nickname}`)}}/>\r\n                  </IconContainer>\r\n                </HeaderContents>\r\n            </Wrapper>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n  writer: \"Robert Downey Jr.\",\r\n  user_profile: \"https://thumbs.dreamstime.com/z/default-avatar-profile-icon-social-media-user-vector-default-avatar-profile-icon-social-media-user-vector-portrait-176194876.jpg\",\r\n  // user_profile: \"https://img.insight.co.kr/static/2018/06/08/700/oaytfz0m123a56r373eh.jpg\",\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid #dbdbdb;\r\n  /* width: 100%; */\r\n  width: 100vw;\r\n  height: 55px;\r\n  position: fixed;\r\n  /* 헤더가 게시물사진에 가려져 안보이기 때문에 인덱스 제일 앞으로 */\r\n  z-index: 1;\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\r\n`;\r\n\r\nconst HeaderContents = styled.div`\r\n  max-width: 1000px;\r\n  width: 100%;\r\n  margin-left: 13px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Logo = styled.div`\r\n    background-image:url('https://firebasestorage.googleapis.com/v0/b/dab-react.appspot.com/o/instagram.png?alt=media&token=a53527c4-07df-4c3f-ae18-ca30c3e0aa2b');\r\n    min-width:150px;\r\n    min-height:50px;\r\n    background-size:contain;\r\n    background-repeat:no-repeat;\r\n    cursor:pointer;\r\n    \r\n`;\r\n\r\nconst IconContainer = styled.div`\r\n  width: 65px;\r\n  margin-right: 14px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Header;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"../elements/Button\";\r\nimport Grid from \"../elements/Grid\";\r\nimport Text from \"../elements/Text\";\r\nimport Header from \"../components/Header\"\r\n\r\n\r\nconst NotFound = (props) => {\r\n    console.log(props);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header/>\r\n            <Wrapper>\r\n                \r\n                <Grid >\r\n                    <Text size=\"16px\" bold>주소가 올바르지 않아요!</Text>\r\n                </Grid>\r\n\r\n                <Button\r\n                    width=\"10em\"\r\n                    is_upload\r\n                    _onClick={() => { props.history.goBack(); }}\r\n                >뒤로가기</Button>\r\n            </Wrapper>\r\n        </React.Fragment>\r\n    )\r\n\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 5em;\r\n    text-align: center;\r\n`;\r\n\r\nexport default NotFound;","import React from \"react\";\r\nimport { history } from \"../redux/configureStore\";\r\n\r\nimport {Grid, Image, Text, Button, Input} from \"../elements\";\r\n\r\nimport { FcLikePlaceholder } from \"react-icons/fc\";\r\nimport { FcLike } from \"react-icons/fc\";\r\n\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { RiEdit2Line } from \"react-icons/ri\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actionCreators as postActions } from \"../redux/modules/post\";\r\n\r\nconst Post = (props) => {\r\n  const dispatch = useDispatch();\r\n  // console.log(props);\r\n\r\n  const likeToggle = () => {\r\n    dispatch(postActions.likeToggleDB(props.postId, props.heartLike))\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid padding=\"0 0 20px 0\">\r\n      \r\n        <Grid is_flex >\r\n          <Grid is_flex padding=\"0px 10px\" width=\"auto\">\r\n            <Image \r\n              shape=\"circle\" \r\n              margin=\"4px\" \r\n              src={props.user_profile}\r\n            />\r\n            <Text \r\n              bold \r\n              _onClick={() => {history.push(`/memberpage/${props.writer}`)}}\r\n              >{props.writer}\r\n            </Text>\r\n          </Grid >\r\n\r\n          <Grid is_flex width=\"auto\" padding=\"0 14px\" >\r\n            <Grid padding=\"0 5px\">\r\n              <MdDelete \r\n              size=\"20px\"\r\n              cursor='pointer'\r\n              // onClick={()=>{console.log(\"삭제!\")}}\r\n              \r\n              onClick={(e)=>{\r\n                // 이벤트 캡쳐링과 버블링 막기\r\n\r\n                e.preventDefault();\r\n                // 이벤트 버블링 막기\r\n                // 한 요소에 이벤트 발생하면 그 요소에 할당된 핸들러 동작 후, 이어서 부모 요소의 핸들러 동작\r\n                // 가장 최상단의 조상 요소를 만날때까지 이 과정 반복.\r\n                // 하지만 되도록이만 안막는게 좋음.\r\n                // 사람들이 페이지에서 어디를 클릭했는지 등의 행동 패턴을 분석하기 위해서\r\n                // window내에서 발생하는 클릭 이벤트 전부를 감지하기로 결정했다면,\r\n                // stopPropagation으로 막아놓은 영역에선 분석 시스템 코드 작동하지 않음.\r\n                // 따라서 버블링을 막아야 하는 경우라면 커스텀 이벤트 등으로 문제 해결할 것.\r\n                e.stopPropagation();\r\n                dispatch(postActions.deletePostDB(props.postId))}}\r\n              />\r\n            </Grid>\r\n\r\n            {/* 내 게시글에만 수정버튼 보일 수 있게 */}\r\n            <Grid> \r\n              {props.checkMember && <RiEdit2Line \r\n              size=\"20px\"\r\n              cursor=\"pointer\"\r\n              disabled=\"\"\r\n              onClick={()=>{history.push(`/edit/${props.postId}`)}}\r\n              // onClick={(e)=>{dispatch(postActions.editPostDB(props.postId))}}\r\n              />}              \r\n            </Grid>\r\n\r\n            {/* disabled 어떻게 먹이는거지? */}\r\n            {/* <Grid> \r\n              <RiEdit2Line \r\n              size=\"20px\"\r\n              cursor=\"pointer\"\r\n              disabled={props.checkMember}\r\n              onClick={()=>{history.push(`/edit/${props.postId}`)}}\r\n              />           \r\n            </Grid> */}\r\n\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid>\r\n            <Image \r\n            shape=\"rectangle\" \r\n            margin=\"5px 0\" \r\n            src={props.image_url}/>\r\n        </Grid>\r\n\r\n        <Grid padding=\"0px 14px\">\r\n          {props.heartLike ?\r\n            <FcLike onClick={likeToggle} size=\"22px\"/>\r\n            :\r\n            <FcLikePlaceholder onClick={likeToggle} size=\"22px\"/>\r\n          }\r\n\r\n          {/* <HeartButton\r\n          _onClick={likeToggle}\r\n          ></HeartButton> */}\r\n          \r\n          {/* <HeartButton \r\n          // heartLike={props.heartLike}\r\n          _onClick={likeToggle}\r\n          ></HeartButton> */}\r\n          {/* <FcLikePlaceholder size=\"22px\"/> */}\r\n\r\n          <Text \r\n          margin=\"0 0 11px 0\"\r\n          >\r\n            좋아요 <span style={{fontWeight: \"bold\"}}>{props.totalLike}</span>개\r\n          </Text>\r\n        </Grid>\r\n\r\n        {/* 원본/ 내용 길어지면 깨짐 */}\r\n        {/* <Grid flex_row padding=\"0 14px 4px 14px\">\r\n          <Text \r\n          margin=\"0px\" \r\n          bold \r\n          padding=\"0 5px 0 0\"\r\n          >{props.writer}\r\n          </Text>\r\n          <Text margin=\"0px\">{props.content}</Text>\r\n        </Grid> */}\r\n\r\n        <Grid flex_row padding=\"0 14px 4px 14px\">\r\n          <Text _onClick={() => {history.push(`/memberpage/${props.writer}`)}}\r\n          margin=\"0px\" \r\n          // bold \r\n          // padding=\"0 5px 0 0\"\r\n          >\r\n          <span style={{fontWeight: \"bold\", padding: \"0 5px 0 0\"}}>{props.writer}</span>\r\n          <span style={{fontWeight: \"none\"}}>{props.content}</span>\r\n          </Text>\r\n        </Grid>\r\n\r\n        <Grid is_flex padding=\" 0px 14px\">\r\n          <Text \r\n          _onClick={()=>{history.push(`/comment/${props.postId}`)}} \r\n          margin=\"0px\" \r\n          color=\"rgba(var(--f52,142,142,142),1)\"\r\n          >댓글 {props.totalComment}개 모두 보기\r\n          </Text>\r\n          {/* <CommentWrite post_id={props.user_info.user_name}/> */}\r\n          {/* <CommentList post_id={props.user_info.user_name}/> */}\r\n        </Grid>\r\n\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n \r\n\r\nPost.defaultProps = {\r\n  writer: \"Robert Downey Jr.\",\r\n  user_profile: \"https://thumbs.dreamstime.com/z/default-avatar-profile-icon-social-media-user-vector-default-avatar-profile-icon-social-media-user-vector-portrait-176194876.jpg\",\r\n  image_url: \"https://cdn.vox-cdn.com/thumbor/M2rjDALxvNDv3yqeYuIdL3spabo=/0x0:2000x1333/1200x675/filters:focal(840x507:1160x827)/cdn.vox-cdn.com/uploads/chorus_image/image/65939918/171109_08_11_37_5DS_0545__1_.0.jpg\",\r\n  content: \"NewYork NewYork\",\r\n  heartLike: false,\r\n  totalLike: 3,\r\n  totalComment: 10,\r\n  checkMember: false,\r\n};\r\n\r\n\r\nexport default Post;","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport {Grid, Input, Button, Image, Text} from \"../elements\";\r\n\r\nimport {actionCreators as postActions} from \"../redux/modules/post\"\r\nimport { actionCreators as commentActions} from \"../redux/modules/comment\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst CommentWrite = (props) => {\r\n    const dispatch = useDispatch();\r\n    const {history} = props;\r\n    const [content, setContent] = React.useState('');\r\n    const {postId} = props;\r\n\r\n    const addComment = () => {\r\n      dispatch(commentActions.addCommentAPI(content, postId));\r\n    }\r\n\r\n    const changeContents = (e) => {\r\n      setContent(e.target.value);\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Section>\r\n        <Outter>\r\n\r\n        {/* <ImageBox> */}\r\n        <Grid is_flex width=\"auto\" margin=\"0px 0px 0px 25px\">\r\n              <Image size=\"36\" shape=\"circle\" src={props.user_profile}/>\r\n        {/* <Image size=\"40\"\r\n               shape=\"circle\" \r\n               src={props.user_profile}/> */}\r\n        </Grid>\r\n        {/* </ImageBox> */}\r\n        \r\n        <Form>\r\n          <InputComment\r\n          placeholder=\"댓글 달기..\"\r\n          onChange={changeContents}\r\n           />\r\n          <ButtonComment\r\n          onClick={addComment}\r\n          >게시</ButtonComment>\r\n        </Form>\r\n\r\n        </Outter>\r\n        </Section>\r\n      </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nconst Section = styled.section`\r\n    border: 0;\r\n    padding: 0;\r\n    top: -2px;\r\n    width: 100%;\r\n    border-top: 1px solid rgba(var(--ce3,239,239,239),1);\r\n    color: rgba(var(--f52,142,142,142),1); \r\n    flex-shrink: 0;\r\n    font-size: 14px;\r\n    line-height: 18px;\r\n    min-height: 56px;\r\n    display:flex;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    background-color: rgba(var(--d87,255,255,255),1);\r\n    border: 1px solid rgba(var(--b6a,219,219,219),1);\r\n    border-radius: 30px;\r\n    margin-right: 16px;\r\n    padding: 12px 20px;\r\n    -webkit-box-align: center;\r\n    align-items: center;\r\n    display: flex;\r\n    -webkit-box-orient: horizontal;\r\n    -webkit-box-direction: normal;\r\n    flex-direction: row;\r\n    -webkit-box-flex: 1;\r\n    flex-grow: 1;\r\n    flex-shrink: 1;\r\n    position: relative;\r\n    margin-left: 25px;\r\n    width: 60px;\r\n`;\r\n\r\nconst Outter = styled.div`\r\nalign-items: center;\r\nbackground-color: rgba(var(--bb2,239,239,239),1);\r\nborder-bottom: 1px solid rgba(var(--b6a,219,219,219),1);\r\nflex-flow: row wrap;\r\n-webkit-box-orient: horizontal;\r\n-webkit-box-direction: normal;\r\n-webkit-box-pack: start;\r\njustify-content: flex-start;\r\npadding: 8px 0;\r\ndisplay:flex;\r\nwidth: 100%;\r\n`;\r\n\r\nconst ImageBox = styled.span`\r\nwidth: 32px;\r\nheight: 32px;\r\n    background-color: rgba(var(--b3f,250,250,250),1);\r\n    border-radius: 50%;\r\n    box-sizing: border-box;\r\n    display: block;\r\n    -webkit-box-flex: 0;\r\n    flex: 0 0 auto;\r\n    overflow: hidden;\r\n    position: relative;\r\n    margin: 0px 0px 0px 25px;\r\n    display: flex;\r\n`;\r\n\r\n\r\nconst InputComment = styled.input`\r\n-webkit-writing-mode: horizontal-tb !important;\r\n    text-rendering: auto;\r\n    letter-spacing: normal;\r\n    word-spacing: normal;\r\n    text-transform: none;\r\n    text-indent: 0px;\r\n    text-shadow: none;\r\n    text-align: start;\r\n    appearance: auto;\r\n    -webkit-rtl-ordering: logical;\r\n    flex-direction: column;\r\n    cursor: text;\r\n    white-space: pre-wrap;\r\n    overflow-wrap: break-word;\r\n    column-count: initial !important;\r\n    margin: 0em;\r\n    font: 400 13.3333px Arial;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    display:flex;\r\n    width: 160px;\r\n    border: none;\r\n    outline: none;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst ButtonComment = styled.button`\r\n    border: 0;\r\n    color: #0095f6;\r\n    color: rgba(var(--d69,0,149,246),1);\r\n    display: inline;\r\n    padding: 0;\r\n    position: relative;\r\n    display:flex;\r\n    background-color: transparent;\r\n    margin-left: 25px;\r\n`;\r\n\r\nCommentWrite.defaultProps = {\r\n  user_profile: \"https://thumbs.dreamstime.com/z/default-avatar-profile-icon-social-media-user-vector-default-avatar-profile-icon-social-media-user-vector-portrait-176194876.jpg\",\r\n};\r\n\r\nexport default CommentWrite;","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Spinner } from \"../elements\";\r\n\r\nconst InfinityScroll = (props) => {\r\n\r\n    const {children, callNext, is_next, loading} = props;\r\n\r\n    const _handleScroll = _.throttle(() => {\r\n\r\n        // 로딩 중이면 다음 걸 부르면 안됨\r\n        if(loading){\r\n            return;\r\n        }\r\n\r\n        const {innerHeight} = window;\r\n        const {scrollHeight} = document.body;\r\n        // 스크롤 계산 (브라우저마다 다르기 때문에 아래의 방법으로 계산)\r\n        const scrollTop =\r\n        (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\r\n\r\n        if (scrollHeight - innerHeight - scrollTop < 200) {\r\n            // 로딩 중이면 다음 걸 부르면 안됨\r\n            if (loading) {\r\n              return;\r\n            }\r\n\r\n            callNext();\r\n        }\r\n    }, 300)\r\n\r\n    // 메모이제이션(리렌더링이 되더라도 _handleScroll 함수 초기화 하지 않게 해주기)\r\n    // 리덕스에서 바꼈을 때, 어떻게 메모이제이션된 함수 내부로 전달하나? 배열에 넘겨주면 됨\r\n    const handleScroll = React.useCallback(_handleScroll, [loading])\r\n\r\n    // 처음 로딩이 되었을 때, 이벤트 달아주기 먼저\r\n    React.useEffect(() => {\r\n\r\n        if(loading){\r\n            return;\r\n        }\r\n\r\n        // 다음 게시글이 없으면 계속 구독할 필요 없음\r\n        if(is_next){\r\n            window.addEventListener(\"scroll\", handleScroll);\r\n        }else{\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n\r\n        // Clean up. 함수형 이벤트 구독 취소 방법(클래스형은 unMount에서 처리)\r\n        return () => window.removeEventListener(\"scroll\", handleScroll);\r\n    }, [is_next, loading]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {props.children}\r\n            {is_next && <Spinner/>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nInfinityScroll.defaultProps = {\r\n    children: null,\r\n    callNext: () => {},\r\n    is_next: false,\r\n    // 아직 다음걸 불러오지 않았는데 또 같은걸 부르는 일 방지\r\n    loading: false,\r\n}\r\n\r\nexport default InfinityScroll;","import React from \"react\";\r\nimport Grid from \"../elements/Grid\"\r\nimport Header from \"../components/Header\";\r\nimport Post from \"../components/Post\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionCreators as postActions } from \"../redux/modules/post\";\r\nimport CommentWrite from \"../components/CommentWrite\";\r\nimport InfinityScroll from \"../shared/InfinityScroll\";\r\nimport user from \"../redux/modules/user\";\r\n\r\n\r\nconst PostList = (props) => {\r\n    const dispatch = useDispatch();\r\n    const post_list = useSelector((state) => state.post.list);\r\n    // 빈배열 잘 떴다\r\n    // console.log(post_list);\r\n    const is_loading = useSelector((state) => state.post.is_loading);\r\n    const user_info = useSelector((state) => state.user.user);\r\n    const paging = useSelector((state) => state.post.paging);\r\n\r\n    // 이 컴포넌트가 생겼을 때 한번만 가져오면 됨 (,뒤에 []빈배열 넣어주면 한번만 가져옴)\r\n    // 서버나 가짜서버(제이슨서버), 파이어베이스 연동 후 post모듈의 콘솔 확인\r\n    React.useEffect(() => {\r\n        // 게시글이 2개 미만일 때는 getPostDB를 호출해서 목록을 불러오기\r\n        // 게시글이 있을때는 새로 리스트를 불러오지 않음\r\n        // 이미 있던 리덕스에서 새 포스트를 제일 앞에 붙임\r\n        // 최신순으로 정렬하면 되는거 아님? -> 무한스크롤\r\n        if (post_list.length < 2) {\r\n            dispatch(postActions.getPostDB());\r\n        }\r\n    }, []);\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Header/>\r\n\r\n            {/* <Grid padding=\"75px 0px\">\r\n                <Post/>\r\n            </Grid> */}\r\n            {/* Post에 게시글 정보 넘겨주는 것까지 끝 */}\r\n            {/* 아무것도 안나오는 이유는 데이터가 없으니까~ 서버랑 연결해야함*/}\r\n            {/* p에는 게시글에 대한 모든 정보 들어감 */}\r\n\r\n            <InfinityScroll\r\n                callNext={() => {\r\n                    console.log(\"next!!!\");\r\n                    dispatch(postActions.getPostDB(paging.next));\r\n                }}\r\n                is_next={paging.next ? true : false}\r\n                loading={is_loading}\r\n            >\r\n                <Grid padding=\"75px 0px\">\r\n                    {post_list.map((p, idx) => {\r\n                        // console.log(p);\r\n                        return <Post key={idx} {...p} image_url={p.imageUrl}/>\r\n                    })}\r\n                </Grid>\r\n            </InfinityScroll>\r\n            \r\n            {/* <button onClick={() => {\r\n                dispatch(postActions.getPostDB(paging.next));\r\n            }}>추가로드</button> */}\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PostList;","//작성페이지 프리뷰(따로 업로드 버튼 클릭하지 않아도 파일 선택만 하면 프리뷰 보여줄 수 있도록)\r\nimport React from \"react\";\r\nimport Button from \"../elements/Button\";\r\nimport styled, { css } from \"styled-components\"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { actionCreators as imageActions } from \"../redux/modules/image\";\r\n\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n  // 사진 업로딩 시, 버튼 안눌리게 하려고\r\n  const uploading = useSelector((state) => state.image.uploading);\r\n  const fileInput = React.useRef();\r\n\r\n  const selectFile = (e) => {\r\n    // e.target은 input. input이 가진 files 객체 확인\r\n    // console.log(e);\r\n    // console.log(e.target);\r\n    // console.log(e.target.files);\r\n    console.log(e.target.files[0]);\r\n    // 파일을 한 개만 입력받는 경우이기 때문에 files[0]으로 접근\r\n    console.log(fileInput.current.files[0]);\r\n\r\n    // 파일 리더 객체를 사용해서 미리보기 넣어주기\r\n    const reader = new FileReader();\r\n    const file = fileInput.current.files[0];\r\n\r\n    // 이미지 업로드는 post모듈에서 addCardDB로 다른 데이터와 한꺼번에 보내므로 필요없음\r\n    // const uploadDB = () => {\r\n    //   if (!fileInput.current || fileInput.current.files.length === 0) {\r\n    //     window.alert(\"파일을 선택해주세요!\");\r\n    //     return;\r\n    //   }\r\n    //   dispatch(imageActions.uploadImageDB(fileInput.current.files[0]));\r\n    // };\r\n\r\n    // 파일객체 넘겨주기\r\n    console.log(file)\r\n    props.changeImage(file)\r\n\r\n    // 파일 내용 읽어오기.\r\n    reader.readAsDataURL(file);\r\n\r\n    // 읽기가 끝나면 발생하는 이벤트 핸들러\r\n    reader.onloadend = () => {\r\n      console.log(reader.result)\r\n      dispatch(imageActions.setPreview(reader.result));\r\n    };\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FileInput\r\n        type=\"file\"\r\n        onChange={selectFile}\r\n        ref={fileInput}\r\n        disabled={uploading}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst FileInput = styled.input`\r\n    width: 100%;\r\n    background-color: #ffffff;\r\n    color: #212121;\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n`;\r\n\r\nexport default Upload;","import React from \"react\";\r\nimport { Grid, Text, Image, Button, Input } from \"../elements\";\r\n\r\nimport Header from \"../components/Header\";\r\nimport Upload from \"../shared/Upload\";\r\nimport CommentWrite from \"../components/CommentWrite\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionCreators as postActions } from \"../redux/modules/post\";\r\n\r\nconst PostWrite = (props) => {\r\n    // 작성완료 버튼에 온클릭 넣어주기 위해서 임포트\r\n    // postActions라는 별칭 만들어서 actionCreators로 온클릭에 넣어주기\r\n    // 넣을때 길어지면 함수로 만들어서 함수명만 {}안에 넣기\r\n    const dispatch = useDispatch();\r\n    const preview = useSelector((state) => state.image.preview);\r\n\r\n    const {history} = props;\r\n\r\n    // useState사용해서 인풋의 텍스트 내용 저장\r\n    const [contents, setContents] = React.useState();\r\n    const [image, setImage] = React.useState();\r\n\r\n    const changeContents = (e) => {\r\n        setContents(e.target.value);\r\n        // 인풋의 onChange에 넣어주고 콘솔 찍어보기\r\n        // 바뀌는 내용이 바로 바로 오게 만든것!\r\n    }\r\n    // console.log(contents);\r\n\r\n    const changeImage = (file) => {\r\n        setImage(file);\r\n        // console.log(file);\r\n    }\r\n    // console.log(image);\r\n\r\n    // 게시글 추가 함수(post모듈에서 addPostDB부분의 필드이름으로 동일하게 넣어줌)\r\n    const addPost = () => {\r\n        dispatch(postActions.addPostDB(contents, image));\r\n    }\r\n\r\n    // 로그인 했을때만 작성할 수 있도록 -> 로그인해야만 메인페이지 진입가능해서 필요없음\r\n    // if(!is_login){\r\n    //     return (\r\n    //         <Grid>\r\n    //             <Text margin=\"100px 0\" padding=\"14px\">로그인 후 이용해 주세요!</Text>\r\n    //             {/* 뒤로가기 했을 때 다시 이 페이지로 들어오는것 방지하기 위해 push대신 replace */}\r\n    //             <Button _onClick={() => {history.replace('/login')}}로그인 하러가기></Button>\r\n    //         </Grid>\r\n    //     )\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header/>\r\n\r\n            <Grid padding=\"75px 0px\">\r\n                <Grid padding=\"20px 14px\">\r\n                    <Upload changeImage={changeImage}/>\r\n                </Grid>\r\n\r\n                <Grid>\r\n                    <Image \r\n                    shape=\"rectangle\" \r\n                    margin=\"5px 0 10px 0\" \r\n                    src={preview ? preview : \"https://media.istockphoto.com/photos/round-podium-or-pedestal-with-blue-background-picture-id1226478932?k=6&m=1226478932&s=170667a&w=0&h=NOFRuuS4sWeCA1LK6lro51uZXfpzPRBHh54ckqCEWw8=\"}/>\r\n                </Grid>\r\n\r\n                <Grid flex_row padding=\"4px 14px\">\r\n                    <Input \r\n                    multiLine \r\n                    value={contents}\r\n                    placeholder=\"내용을 입력해 주세요:)\"\r\n                    margin=\"0px\" \r\n                    // _onChange={() => {console.log(\"작성인풋\")}}\r\n                    _onChange={changeContents}\r\n                    >{props.contents}</Input>\r\n                </Grid>\r\n\r\n                <Grid padding=\"4px 14px\">\r\n                    <Button \r\n                    is_upload \r\n                    // _onClick={() => {console.log(\"업로드완료\")}}\r\n                    _onClick={addPost}\r\n                    >작성완료</Button>\r\n                </Grid>\r\n            \r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nPostWrite.defaultProps = {\r\n    // user_info: {\r\n    //   user_name: \"user_name\",\r\n    //   user_profile: \"https://image5jvqbd.fmkorea.com/files/attach/new/20200816/486616/657118072/3039288745/99b983892094b5c6d2fc3736e15da7d1.jpeg\",\r\n    // },\r\n    image_url: \"https://media.istockphoto.com/photos/round-podium-or-pedestal-with-blue-background-picture-id1226478932?k=6&m=1226478932&s=170667a&w=0&h=NOFRuuS4sWeCA1LK6lro51uZXfpzPRBHh54ckqCEWw8=\",\r\n    contents: \"\",\r\n    // deleteButton: \"delete\",\r\n    // editButton: \"edit\",\r\n    // comment_cnt: 10,\r\n  };\r\n\r\nexport default PostWrite;","import React from \"react\";\r\nimport { Grid, Text, Image, Button, Input } from \"../elements\";\r\n\r\nimport Header from \"../components/Header\";\r\nimport Upload from \"../shared/Upload\";\r\nimport CommentWrite from \"../components/CommentWrite\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionCreators as postActions } from \"../redux/modules/post\";\r\nimport { actionCreators as imageActions } from \"../redux/modules/image\"\r\n\r\nconst PostEdit = (props) => {\r\n    // 수정완료 버튼에 온클릭 넣어주기 위해서 임포트\r\n    // postActions라는 별칭 만들어서 actionCreators로 온클릭에 넣어주기\r\n    // 넣을때 길어지면 함수로 만들어서 함수명만 {}안에 넣기\r\n    const dispatch = useDispatch();\r\n    const preview = useSelector((state) => state.image.preview);\r\n    const post_list = useSelector((state) => state.post.list);\r\n    // console.log(post_list);\r\n\r\n    // match.params는 있는데 그 안에 id는 없다? -> 수정버튼에 `edit/${props.postId}` 적용해줘야함\r\n    // console.log(props);\r\n    // console.log(props.match.params.id);\r\n\r\n    // prams로 가져온 값은 string이므로 postId와 비교하기 위해선 숫자로 바꿔줘야함\r\n    const post_id = parseInt( props.match.params.id ) ;\r\n\r\n    const {history} = props;\r\n\r\n    let _post = post_list.find((p) => p.postId === post_id);\r\n\r\n    // 잘 나옴. 근데 새로고침 하면 리덕스 날아가서 undefined 뜸\r\n    // useEffect로 포스트 정보 없을때 goBack해주기\r\n    // id추가 해주니까 undefined 뜸\r\n    // console.log(_post);\r\n\r\n    // useState사용해서 기존 데이터 가져오기\r\n    const [contents, setContents] = React.useState(_post? _post.content : \"\");\r\n    // const [image, setImage] = React.useState(_post? _post.imageUrl : \"\");\r\n    // console.log(image);\r\n\r\n    React.useEffect(() => {\r\n        if (!_post) {\r\n            // console.log(\"포스트 정보가 없어요!\");\r\n            history.goBack();\r\n      \r\n            return;\r\n          }\r\n\r\n        dispatch(imageActions.setPreview(_post.imageUrl))\r\n    }, [])\r\n\r\n    const changeContents = (e) => {\r\n        setContents(e.target.value);\r\n        // 인풋의 onChange에 넣어주고 콘솔 찍어보기\r\n        // 바뀌는 내용이 바로 바로 오게 만든것!\r\n    }\r\n    // console.log(contents);\r\n\r\n    // const changeImage = (file) => {\r\n    //     setImage(file);\r\n    //     console.log(file);\r\n    // }\r\n    // console.log(image);\r\n\r\n    // 게시글 수정 함수(post모듈에서 editPostDB부분의 필드이름으로 동일하게 넣어줌)\r\n    const editPost = () => {\r\n        dispatch(postActions.editPostDB(post_id, contents));\r\n    }\r\n\r\n    // 로그인 했을때만 작성할 수 있도록\r\n    // if(!is_login){\r\n    //     return (\r\n    //         <Grid>\r\n    //             <Text margin=\"100px 0\" padding=\"14px\">로그인 후 이용해 주세요!</Text>\r\n    //             {/* 뒤로가기 했을 때 다시 이 페이지로 들어오는것 방지하기 위해 push대신 replace */}\r\n    //             <Button _onClick={() => {history.replace('/login')}}로그인 하러가기></Button>\r\n    //         </Grid>\r\n    //     )\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header/>\r\n            <Grid padding=\"75px 0px\">\r\n\r\n                <Grid>\r\n                    <Image \r\n                    shape=\"rectangle\" \r\n                    margin=\"5px 0 10px 0\" \r\n                    src={preview}/>\r\n                </Grid>\r\n\r\n                <Grid flex_row padding=\"4px 14px\">\r\n                    <Input \r\n                    multiLine \r\n                    value={contents}\r\n                    placeholder=\"내용을 입력해 주세요:)\"\r\n                    margin=\"0px\" \r\n                    // _onChange={() => {console.log(\"수정인풋\")}}\r\n                    _onChange={changeContents}\r\n                    >{props.contents}</Input>\r\n                </Grid>\r\n\r\n                <Grid padding=\"4px 14px\">\r\n                    <Button \r\n                    is_upload \r\n                    // _onClick={() => {console.log(\"수정완료\")}}\r\n                    _onClick={editPost}\r\n                    >수정완료</Button>\r\n                </Grid>\r\n            \r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nPostEdit.defaultProps = {\r\n    image_url: \"https://analyticsindiamag.com/wp-content/uploads/2020/10/7d744a684fe03ebc7e8de545f97739dd.jpg\",\r\n    contents: \"\",\r\n  };\r\n\r\nexport default PostEdit;","// 정규식으로 이메일 형식이 맞나 체크해주는 함수\r\n\r\n//아이디 체크 정규식\r\nexport const idCheck = (nickname) => {\r\n \r\n  const _reg =/^(?!(?:[0-9]+)$)([a-zA-Z]|[0-9a-zA-Z]){6,}$/\r\n  return _reg.test(nickname);\r\n}\r\n\r\n//패스워드 체크 정규식\r\nexport const pwMacth = (password) => {\r\n  \r\n  const _reg = /^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{10,}$/;\r\n  return  _reg.test(password) && password.search(/\\s/) == -1 ?true:false;\r\n\r\n}\r\n\r\nexport const pwContinuous = (password) => {\r\n  \r\n  const _reg = /(\\w)\\1\\1/;\r\n  return _reg.test(password)\r\n}\r\n\r\n//이메일 체크 정규식\r\nexport const emailCheck = (email) => {\r\n\r\n  let _reg = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\r\n  return _reg.test(email);\r\n\r\n}","import React, {useCallback, useState} from \"react\";\r\nimport {Text, Input, Grid, Button} from \"../elements/index\";\r\nimport styled from 'styled-components';\r\n\r\nimport { history } from \"../redux/configureStore\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { actionCreators as userActions } from \"../redux/modules/user\";\r\nimport Login from \"./Login\";\r\nimport {emailCheck} from \"../shared/common\";\r\n\r\nconst Signup = () => {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPwd] = useState('')\r\n  const [passwordConfirm, setConfirmedPwd] = useState('') \r\n  const [nickname, setName] = useState('')\r\n  \r\n  const data = {\r\n    email: email,\r\n    nickname: nickname,\r\n    password: password,\r\n    passwordConfirm: passwordConfirm,\r\n\r\n  }\r\n\r\n  const submitEmail = (e) => {\r\n    setEmail(e.target.value)\r\n  }\r\n\r\n  const submitName = (e) => {\r\n    setName(e.target.value)\r\n  }\r\n  const submitPwd = (e) => {\r\n    setPwd(e.target.value)\r\n  }\r\n  const submitConfirmedPwd = (e) => {\r\n    setConfirmedPwd(e.target.value)\r\n  }\r\n\r\n  const siteSignup = () => {\r\n    if (!email || !password || !nickname || !passwordConfirm) {\r\n      window.alert(\"아이디, 패스워드, 닉네임을 모두 입력해주세요!\");\r\n      return;\r\n    }\r\n    // 사전 정의된 정규표현식으로 이메일 형식 체크\r\n    if(!emailCheck(email)){\r\n      window.alert('이메일 형식이 맞지 않습니다!');\r\n      return;\r\n    }\r\n    if (password !== passwordConfirm){\r\n      window.alert(\"패스워드와 패스워드 확인이 일치하지 않습니다!\");\r\n      return;\r\n    }\r\n    \r\n    dispatch(userActions.SignUPApi(data))\r\n  \r\n  }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid center padding=\"10px\"> \r\n            \r\n        <InnerBox>\r\n          <LoginBox>\r\n          <BannerBox>\r\n          <Banner/>\r\n          </BannerBox>\r\n            <TopText>\r\n              친구들의 사진과 동영상을 보려면 가입하세요.\r\n            </TopText>\r\n            <Grid padding=\"16px 0px\">\r\n              <SignupInput \r\n                placeholder=\"이메일 주소\"\r\n                type=\"email\"\r\n                onChange={submitEmail}\r\n              />\r\n              <SignupInput \r\n                placeholder=\"사용자 이름\"\r\n                onChange={submitName}\r\n                 \r\n              />\r\n              <SignupInput \r\n                placeholder=\"비밀번호\"\r\n                type=\"password\"\r\n                onChange={submitPwd}\r\n              />\r\n              <SignupInput \r\n                placeholder=\"비밀번호 확인\"\r\n                type=\"password\"\r\n                onChange={submitConfirmedPwd}\r\n              />\r\n              \r\n              <Button\r\n                text=\"가입\"\r\n                width=\"260px\"\r\n                height=\"40px\"\r\n                margin=\"10px auto\"\r\n                bg=\"#0095f6\"\r\n                border=\"none\"\r\n                borderRadius=\"5px\"\r\n                _onClick={()=> {siteSignup()\r\n                }}\r\n              />\r\n            </Grid>\r\n          </LoginBox>\r\n          <SingUpBox>\r\n            <SingUpText>\r\n              계정이 있으신가요?   \r\n              <span\r\n                style={{ color: \"#0095f6\", fontWeight: \"bold\", border: \"none\"}}\r\n                onClick={() => {\r\n                  history.push(\"/login\");\r\n                }}\r\n              >\r\n                로그인\r\n              </span>\r\n            </SingUpText>\r\n          </SingUpBox>\r\n        </InnerBox>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n    \r\n}\r\n\r\nconst OutBox = styled.div`\r\n  position: absolute;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  text-align: center;\r\n  width: 700px;\r\n  height: 600px;\r\n  margin: 25% auto;\r\n  z-index: 1;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst InnerBox = styled.div`\r\n  width: 330px;\r\n  height: 430px;\r\n  padding: 0;\r\n  margin: auto;\r\n`;\r\n\r\nconst BannerBox = styled.div`\r\n    width:100%;\r\n    min-height:100px;\r\n    padding: 0px 20%;\r\n    margin: 10px auto;\r\n    `;\r\n    \r\n  const Banner = styled.div`\r\n    background-image:url('https://firebasestorage.googleapis.com/v0/b/dab-react.appspot.com/o/instagram.png?alt=media&token=a53527c4-07df-4c3f-ae18-ca30c3e0aa2b');\r\n    width:100%;\r\n    margin: auto;\r\n    min-height:100px;\r\n    background-size:contain;\r\n    background-repeat:no-repeat;\r\n    `;\r\n\r\n\r\nconst LoginBox = styled.div`\r\n  width: 300px;\r\n  align-items: center;\r\n  margin: auto;\r\n  border: none;\r\n  margin-top: 40px;\r\n`;\r\n\r\nconst TopText = styled.div`\r\ncolor: #8e8e8e;\r\ncolor: rgba(var(--f52,142,142,142),1);\r\nfont-size: 17px;\r\nfont-weight: 600;\r\nline-height: 20px;\r\nmargin: 0 20px 10px;\r\ntext-align: center;\r\n`;\r\n\r\nconst LoginBtn = styled.button`\r\n  width: 240px;\r\n  height: 25px;\r\n`;\r\n\r\nconst SingUpBox = styled.div`\r\n  border: none;\r\n  width: 300px;\r\n  height: 80px;\r\n  margin: 10px auto;\r\n  text-align: center;\r\n  cursor: pointer;\r\n   border: none;\r\n`;\r\n\r\nconst SingUpText = styled.div`\r\n  margin-top: 27px;\r\n  align-items: center;\r\n \r\n  \r\n`;\r\n\r\nconst Bg = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #fafafa;\r\n`;\r\n\r\nconst SignupInput = styled.input`\r\nborder: 1px solid #DCDBDC;\r\nwidth: 260px;\r\npadding: 12px 4px;\r\nbox-sizing: border-box;\r\nmargin: 3px auto;\r\nweight: 36px;\r\n`;\r\n\r\nexport default Signup;","import React, {useCallback} from \"react\";\r\nimport { history } from \"../redux/configureStore\";\r\n\r\nimport styled from 'styled-components';\r\nimport {Text, Input, Grid, Button} from \"../elements/index\";\r\n\r\nimport Signup from \"./Signup\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { actionCreators as userActions } from \"../redux/modules/user\";\r\nimport {emailCheck} from \"../shared/common\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n\r\n  const data = {\r\n    email: email,\r\n    password: password,\r\n  }\r\n\r\n  const submitEmail = (e) => {\r\n    setEmail(e.target.value)\r\n  }\r\n\r\n  const submitPwd = (e) => {\r\n    setPassword(e.target.value)\r\n  }\r\n  const LogIn = (response) => {\r\n\r\n    if (email === \"\" || password === \"\") {\r\n      window.alert(\"아이디 혹은 비밀번호가 공란입니다! 입력해주세요!\");\r\n      return;\r\n    }\r\n\r\n    // id가 이메일 형식이 맞나 확인!\r\n    if (!emailCheck(email)) {\r\n      window.alert(\"이메일 형식이 맞지 않습니다!\");\r\n      return;\r\n    }\r\n      dispatch(userActions.loginAPI(data));\r\n  }\r\n\r\n  return (\r\n      <React.Fragment>           \r\n        <Grid bg_color='white' flex_column padding=\"0 10%\" max_height=\"380px\">\r\n        \r\n        <LoginBox>\r\n        <BannerBox>\r\n          <Banner/>       \r\n          </BannerBox>\r\n          <Line/>\r\n          {/* 회원가입 박스 */}\r\n          <InputBox>\r\n            {/* input 값의 변화를 state에 저장 */}\r\n            <SignupInput  type='email' onChange={submitEmail} placeholder=\"아이디를 입력하세요\" margin='5px'/>\r\n            <SignupInput type='password' onChange={submitPwd}\r\n              placeholder=\"비밀번호를 입력하세요\" margin='5px'/>\r\n          <TextBox>\r\n          <Text color=\"#0095f6\">비밀번호를 잊으셨나요?</Text>\r\n          </TextBox>\r\n          <Button borderRadius=\"5px\" border=\"none\" text=\"로그인\" width=\"260px\" margin=\"10px auto\" bg=\"#0095f6\"\r\n            _onClick={() => {LogIn();}}></Button>\r\n          </InputBox>\r\n          </LoginBox>\r\n            \r\n          <Grid>\r\n            <SignUpBox>계정이 없으신가요? <SignSpan onClick={()=>{history.push('/signup')}}>가입하기</SignSpan></SignUpBox>\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n    \r\n  const BannerBox = styled.div`\r\n    width:100%;\r\n    min-height:100px;\r\n    padding: 0px 20%;\r\n    margin: 10px auto;\r\n    `;\r\n    \r\n  const Banner = styled.div`\r\n    background-image:url('https://firebasestorage.googleapis.com/v0/b/dab-react.appspot.com/o/instagram.png?alt=media&token=a53527c4-07df-4c3f-ae18-ca30c3e0aa2b');\r\n    width:100%;\r\n    margin: auto;\r\n    min-height:100px;\r\n    background-size:contain;\r\n    background-repeat:no-repeat;\r\n    `;\r\n    \r\n\r\n  const Line = styled.hr`\r\n    margin: auto auto 25px auto;\r\n    border: 1px dotted #ddd;\r\n    `;\r\n\r\n  const LoginBox = styled.div`\r\n    width: 300px;\r\n    align-items: center;\r\n    margin: 70px auto 10px auto;\r\n    border: none;\r\n    display: block;\r\n    justify-content: center;\r\n    \r\n`;\r\n\r\nconst InputBox = styled.div`\r\n    display: block;\r\n    margin: auto 20px;\r\n    vertical-align: middle;\r\n    /* inline-block; */\r\n    \r\n`;\r\n\r\nconst TextBox = styled.div`\r\ncursor : pointer;\r\ntext-align: right;\r\n`;\r\n\r\nconst SignupInput = styled.input`\r\n  border: 1px solid #DCDBDC;\r\n  width: 260px;\r\n  padding: 12px 4px;\r\n  box-sizing: border-box;\r\n  margin: 7px 0px 10px 0px;\r\n`;\r\n\r\nconst SignUpBox = styled.p`\r\nmargin: 15px auto auto auto;\r\npadding: 0;\r\nborder: 0;\r\ncolor: #DCDBDC;\r\ntext-align: center;\r\n\r\n`;\r\n\r\nconst SignSpan = styled.span`\r\ncolor: #0095f6;\r\ncursor : pointer;\r\n`;\r\n\r\n\r\n\r\nexport default Login;","import React from \"react\";\r\nimport { history } from \"../redux/configureStore\";\r\nimport { actionCreators as userActions } from \"../redux/modules/user\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport {Text, Input, Grid, Button, Image} from \"../elements/index\";\r\nimport styled from 'styled-components';\r\n\r\nconst ProfileHeader = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  \r\n\r\n  const logOut = () => {\r\n      if(window.confirm('로그아웃 하시겠어요?')){\r\n        dispatch(userActions.logOutApi(history))\r\n      } else{\r\n        return\r\n      }\r\n  };\r\n\r\n    // if (post_data.user) {\r\n    return (\r\n        <React.Fragment>\r\n          <Grid is_flex align-items=\"center\" padding=\"50px 0px 10px 0px\">\r\n            <Container>\r\n              \r\n              <UserName>\r\n                <Select  type=\"select\" value=\"\">\r\n                  <Option >{props.writer}</Option>\r\n                  <Option \r\n                  onClick={()=>{history.push('/login')}}\r\n                  >로그아웃</Option>\r\n              </Select>\r\n              </UserName>\r\n              \r\n            <Profile>\r\n              <ImageBox>\r\n              <Image\r\n                shape=\"circle\"\r\n                size=\"77\"\r\n                margin=\"10px 5%\"\r\n                box-sizing=\"border-box\"\r\n                width=\"30%\"\r\n                border=\"1px solid blue\"\r\n                flex=\"1\"\r\n                src={props.user_profile}\r\n\r\n              />\r\n              </ImageBox>\r\n              <Ui>\r\n                <Li1><List>77</List><List>게시물</List></Li1>\r\n                <Li2><List>88</List><List>팔로워</List></Li2>\r\n                <Li3><List>99</List><List>팔로우</List></Li3>\r\n              </Ui>\r\n              \r\n            </Profile>\r\n            <TextContainer>\r\n                <Status> (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧)</Status>\r\n            </TextContainer>\r\n            \r\n            </Container>\r\n          </Grid>\r\n          \r\n        </React.Fragment>\r\n      );\r\n   \r\n};\r\n\r\n  const Container = styled.div`\r\n    width: 300px;\r\n    flex-direction: row;\r\n    padding: 5px;\r\n    align-items: center;\r\n    margin: 5px auto;\r\n    \r\n  `;\r\n\r\n  const UserName = styled.div`\r\n  font-size: 30px;\r\n  `;\r\n\r\n  const Select = styled.select`\r\n  width: auto;\r\n  height: 40px;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  border: none;\r\n  background: transparent;\r\n  margin: 0px 0px 0px 7px;\r\n  cursor: pointer;\r\n \r\n  `;\r\n\r\n  const Option = styled.option`\r\n  font-size: 15px;\r\n  border: none;\r\n  \r\n  `;\r\n\r\n  const Profile = styled.div`\r\n    \r\n    width: 100%;\r\n    height: 40%;\r\n    display: flex;\r\n  `;\r\n  \r\n  const TextContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: auto;\r\n    width: 100%;\r\n    font-weight: bold;\r\n    \r\n  `;\r\n\r\n  const ImageBox = styled.div`\r\n  display:flex;\r\n  margin: 10px;\r\n  width: 30%;\r\n  `;\r\n\r\n  const Ui = styled.div`\r\n  width: 70%;\r\n  box-sizing: border-box;\r\n  hegiht: 50px;\r\n  margin: 20px auto;\r\n  \r\n  \r\n  `;\r\n\r\n  const Li1 = styled.div`\r\n  float: left;\r\n  width: 30%;\r\n  hegiht: 10px;\r\n  box-sizing: border-box;\r\n  `;\r\n  \r\n  const Li2 = styled.div`\r\n  float: left;\r\n  margin-left: 5%;\r\n  width:30%;\r\n  box-sizing: border-box;\r\n  `;\r\n  \r\n  const Li3 = styled.div`\r\n    float: right;\r\n    width:30%;\r\n    box-sizing: border-box;\r\n  `;\r\n\r\n  const List = styled.div`\r\n  font-size: 15px;\r\n  text-align: center;\r\n  margin-top: 10px;\r\n  `;\r\n\r\n  const ProfileName = styled.div`\r\n  margin: 10px 10px;\r\n  font-size: 15px;\r\n  `;\r\n\r\n  const Status = styled.div`\r\n  margin: 0px 10px 5px 10px;\r\n  font-size: 15px;\r\n  padding: 0px 15px 0px 15px;\r\n  width: auto;\r\n  `;\r\n\r\n  ProfileHeader.defaultProps = {\r\n    writer: \"Robert Downey Jr.\",\r\n    user_profile: \"https://img.insight.co.kr/static/2018/06/08/700/oaytfz0m123a56r373eh.jpg\",\r\n  };\r\n\r\nexport default ProfileHeader;","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport {Text, Input, Grid, Button, Image} from \"../elements/index\";\r\n\r\nimport Header from \"../components/Header\";\r\nimport ProfileHeader from \"../components/ProfileHeader\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionCreators as profileActions } from \"../redux/modules/profile\";\r\n\r\nconst Mypost = (props) => {\r\n  const dispatch = useDispatch();\r\n  const writer = props.match.params.writer;\r\n\r\n  const _writer = useSelector((state) => (state.profile.writer));\r\n  const _imageUrl = useSelector((state) => (state.profile.imageUrl));\r\n  console.log(_imageUrl)\r\n\r\n  React.useEffect(() => {\r\n    dispatch(profileActions.profile_loadingAPI(writer, _imageUrl ));\r\n  }, []);\r\n\r\n  if (!_writer || !_imageUrl){\r\n    return(<div>로딩중</div>)\r\n  }\r\n  \r\n    return (\r\n        <React.Fragment>\r\n          <Header/>\r\n          <Grid  padding=\"57px 0px\" is_flex width=\"auto\" bg_color='white' flex_column padding=\"0 10%\" max_height=\"380px\">\r\n     \r\n            <ProfileHeader />\r\n            <Container>\r\n            {_imageUrl.map((p, idx) => {\r\n              console.log(props.url)\r\n           return <Div key={idx} {...p} image_url= {props}/>\r\n          })} \r\n            </Container>\r\n          </Grid>\r\n        </React.Fragment>\r\n      );\r\n};\r\n\r\nconst Container = styled.div`\r\ngrid-template-rows: repeat(3, minmax(100px, auto));\r\ngrid-template-columns: repeat(3, 1fr);\r\ndisplay: grid;\r\nalign-items: stretch;\r\nplace-items: center start;\r\nborder: 1px solid black;\r\nwidth: 100%;\r\nheight: auto;\r\nmargin-top: 30px;\r\n`;\r\n\r\nconst Div = styled.div`\r\nz-index: 1;\r\nalign-content: stretch;\r\njustify-content: stretch;\r\nborder: 1px solid blue;\r\nwidth: 100%;\r\nheight: 100%;\r\nbackground-size: cover;\r\n`;\r\n\r\nexport default Mypost;","import React from \"react\";\r\nimport {Grid, Image, Text} from \"../elements\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { FcLikePlaceholder } from \"react-icons/fc\";\r\n\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport { history } from \"../redux/configureStore\";\r\nimport {actionCreators as commentActions} from \"../redux/modules/comment\"   \r\n\r\n\r\nconst Comment = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const is_writer = props.checkMember\r\n\r\n  return (\r\n      <Grid is_flex width=\"auto\" padding=\"3px 25px\" margin=\"3px 0px 0px 0px\">\r\n      <Grid is_flex width=\"auto\" margin=\"0px 5px 0px 0px\">\r\n              <Image shape=\"circle\" src={props.user_profile}/>\r\n              \r\n              <Text margin=\"auto auto auto 5px\" bold\r\n              _onClick={()=>{history.push(`/memberpage/${props.writer}`)}} \r\n              >{props.writer}</Text>\r\n          </Grid>\r\n          <Grid margin=\"0px 4px\">\r\n          \r\n              <TextComment >{props.content}</TextComment>\r\n              </Grid>\r\n\r\n              <Grid is_flex width=\"10%\">\r\n              {/* <FcLikePlaceholder margin=\"auto 5px\" size=\"22px\" /> */}\r\n              {is_writer? <MdDelete onClick={(e)=>{dispatch(commentActions.deleteCommentAPI(props.commentId))}}/> : \"\" }\r\n             \r\n              \r\n            \r\n              \r\n              </Grid>  \r\n          </Grid>\r\n  )\r\n}\r\n\r\nconst TextComment = styled.text`\r\nvertical-align: center;\r\nmargin: left;\r\nfont-size: 13px;\r\ntext-align: left;\r\n`;\r\n\r\nComment.defaultProps = {\r\n  user_profile: \"https://thumbs.dreamstime.com/z/default-avatar-profile-icon-social-media-user-vector-default-avatar-profile-icon-social-media-user-vector-portrait-176194876.jpg\",\r\n};\r\n\r\nexport default Comment;\r\n\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Grid, Image, Text, Button, Input} from \"../elements\";\r\nimport { history } from \"../redux/configureStore\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {actionCreators as commentActions} from \"../redux/modules/comment\";\r\n\r\nimport CommentWrite from \"../components/CommentWrite\";\r\nimport comment from \"../components/Comment\";\r\nimport Header from \"../components/Header\";\r\nimport Comment from \"../components/Comment\";\r\n\r\n\r\nconst CommentList = (props) => {\r\n    const dispatch = useDispatch();\r\n    const comment_list = useSelector((state) => state.comment.list);\r\n    const postId = props.match.params.postId;\r\n\r\n    // 댓글 최신순으로 구현하는 함수\r\n    const content_list = comment_list.slice(0, comment_list.length)\r\n    .sort(function(a, b) {\r\n         const timeA = a.createdAt; const timeB = b.createdAt; \r\n         if (timeA < timeB) return 1; if (timeA > timeB) return -1; });\r\n    \r\n    // const commentId = props.match;\r\n    // console.log(content_list)\r\n\r\n    React.useEffect(() => {\r\n        dispatch(commentActions.setCommentAPI(postId));\r\n        // dispatch(commentActions.deleteCommentAPI(commentId));\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header/>\r\n            \r\n            <Grid padding=\"57px 0px\">\r\n\r\n            <CommentWrite postId={postId}/>\r\n            {/* <hr style={{ width:\"90%\"}}/> */}\r\n            {content_list.map((p, idx) => {\r\n                return <Comment key={idx} {...p}/>\r\n             })}\r\n\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default CommentList;","import React, { useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Switch, withRouter } from \"react-router-dom\";\r\nimport { history } from \"../redux/configureStore\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\n\r\nimport NotFound from \"./NotFound\";\r\nimport PostList from \"../pages/PostList\";\r\nimport PostWrite from \"../pages/PostWrite\";\r\nimport PostEdit from \"../pages/PostEdit\";\r\nimport Login from \"../pages/Login\";\r\nimport Signup from \"../pages/Signup\";\r\nimport Mypost from \"../pages/Mypost\";\r\nimport CommentList from \"../pages/CommentList\";\r\n\r\n// 리액트 페이지 옮겨 다닐땐 react-router-dom써서 history.push요런걸로 이동했음\r\n// 그런데 history객체는 Route로 엮어줘야 쓸 수 있었음. 즉 컴포넌트에만 있어서\r\n// App.js에서 라우트 통해 프롭스로 받아다가 쓰는거니까 컴포넌트만 사용가능\r\n// 그러니까 리덕스에서 못쓰는 상태가 되고 window.location.href는 페이지가 재런더링 되면서\r\n// 리덕스에 있는 데이터 다 날아감\r\n// 따라서 컴포넌트끼리만 가지고 있던 history를 리덕스에서도 쓸 수 있게끔 해줘야함\r\n// history@4.10.1 connected-react-router@6.8.0 패키지 설치\r\nfunction App() {\r\n\r\n  return (\r\n    <React.Fragment>        \r\n      <ConnectedRouter history={history}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={PostList} />\r\n          <Route exact path=\"/write\" component={PostWrite} />\r\n          <Route exact path=\"/edit/:id\" component={PostEdit} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/signup\" component={Signup} />\r\n          <Route exact path=\"/memberpage/:writer\" component={Mypost} />\r\n          <Route exact path=\"/comment/:postId\" component={CommentList} />\r\n          <Route render={(props) => (<NotFound history={props.history}/>)} />\r\n        </Switch>\r\n      </ConnectedRouter>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './shared/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport store, { history } from \"./redux/configureStore\";\r\nimport { Provider } from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n        <App />\r\n    </ConnectedRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}